{"version":3,"sources":["../webpack/bootstrap",".././src/lines.ts","../external \"vscode\"",".././src/extension.ts",".././src/formatters.ts",".././src/configuration.ts",".././src/declarationGroups.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isCommentLine","line","text","charAt","firstNonWhitespaceCharacterIndex","lineText","search","isEmptyOrWhitespace","document","iteratee","lineCount","nextLineNumber","lineAt","require","provideDocumentFormattingEdits","textEdits","formatSpacing","createSpacingFormatter","forEachLine","newText","removeLeadingWhitespace","isDeclarationLine","push","TextEdit","replace","range","languages","registerDocumentFormattingEditProvider","SPACING_REGEXP","spacing","trim","formatSpacingSimple","currentLineText","minSpacing","getMinSpacing","repeat","formatSpacingColumns","declarationGroups","declarationGroup","find","group","lineStart","lineNumber","lineEnd","groupLength","longestItemLength","itemLength","getLineItemLength","getShouldFormatColumns","parseDeclarationGroups","getConfiguration","workspace","currentGroup","undefined"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","import { TextDocument, TextLine } from 'vscode';\n\nexport function getLineItemLength(lineText: string): number {\n  return lineText.search(/\\s/);\n}\n\nexport function isCommentLine(line: TextLine): boolean {\n  const firstNonWSChar = line.text.charAt(line.firstNonWhitespaceCharacterIndex);\n  return firstNonWSChar === '#';\n}\n\nexport function isDeclarationLine(line: TextLine): boolean {\n  return !line.isEmptyOrWhitespace && !isCommentLine(line);\n}\n\nexport function forEachLine(document: TextDocument, iteratee: (line: TextLine) => void): void {\n  const lineCount = document.lineCount;\n  let nextLineNumber = 0;\n  while (nextLineNumber < lineCount) {\n    const line = document.lineAt(nextLineNumber);\n    iteratee(line);\n    nextLineNumber++;\n  }\n}\n","module.exports = require(\"vscode\");","import { languages, TextDocument, TextEdit } from 'vscode';\nimport { createSpacingFormatter, removeLeadingWhitespace } from './formatters';\nimport { forEachLine, isDeclarationLine } from './lines';\n\nfunction provideDocumentFormattingEdits(document: TextDocument): TextEdit[] {\n  const textEdits: TextEdit[] = [];\n  const formatSpacing = createSpacingFormatter(document);\n\n  forEachLine(document, (line) => {\n    let newText = removeLeadingWhitespace(line.text);\n\n    if (isDeclarationLine(line)) {\n      newText = formatSpacing(newText, line);\n    }\n\n    if (line.text !== newText) {\n      textEdits.push(TextEdit.replace(line.range, newText));\n    }\n  });\n\n  return textEdits;\n}\n\nexport async function activate(): Promise<void> {\n  languages.registerDocumentFormattingEditProvider('dircolors', {\n    provideDocumentFormattingEdits,\n  });\n}\n","import { TextDocument, TextLine } from 'vscode';\nimport configuration from './configuration';\nimport { parseDeclarationGroups } from './declarationGroups';\nimport { getLineItemLength } from './lines';\nimport { DeclarationGroup, Formatter } from './types';\n\nconst SPACING_REGEXP = /^([^#\\s][^\\s]+)\\s+([^#\\s]+)( ?)\\s*(#?)/;\n\nexport function removeLeadingWhitespace(currentLineText: string): string {\n  return currentLineText.replace(/^\\s+/, '');\n}\n\nfunction formatSpacing(lineText: string, spacing: string) {\n  return lineText.replace(SPACING_REGEXP, `$1${spacing}$2$3$4`).trim();\n}\n\nexport function formatSpacingSimple(currentLineText: string): string {\n  const minSpacing = configuration.getMinSpacing();\n  return formatSpacing(currentLineText, ' '.repeat(minSpacing || 0));\n}\n\nexport function formatSpacingColumns(\n  currentLineText: string,\n  line: TextLine,\n  declarationGroups: DeclarationGroup[]\n): string {\n  const minSpacing = configuration.getMinSpacing();\n  const declarationGroup = declarationGroups.find(\n    (group) => group.lineStart <= line.lineNumber && group.lineEnd >= line.lineNumber\n  );\n\n  const groupLength = declarationGroup?.longestItemLength || 0;\n  const itemLength = getLineItemLength(currentLineText);\n  const spacingOffset = groupLength - itemLength + minSpacing;\n  const spacing = ' '.repeat(spacingOffset);\n  return formatSpacing(currentLineText, spacing);\n}\n\nexport function createSpacingFormatter(document: TextDocument): Formatter {\n  if (configuration.getShouldFormatColumns()) {\n    const declarationGroups = parseDeclarationGroups(document);\n\n    return (currentLineText: string, line: TextLine) =>\n      formatSpacingColumns(currentLineText, line, declarationGroups);\n  }\n\n  return formatSpacingSimple;\n}\n","import { workspace } from 'vscode';\n\nfunction getConfiguration() {\n  return workspace.getConfiguration('dircolors');\n}\n\nfunction getShouldFormatColumns(): boolean {\n  return getConfiguration().get<boolean>('formatColumns', true);\n}\n\nfunction getMinSpacing(): number {\n  return getConfiguration().get<number>('minSpacing', 1);\n}\n\nexport default {\n  getShouldFormatColumns,\n  getMinSpacing,\n};\n","import { TextDocument } from 'vscode';\nimport { forEachLine, getLineItemLength, isDeclarationLine } from './lines';\nimport { DeclarationGroup } from './types';\n\nexport function parseDeclarationGroups(document: TextDocument): DeclarationGroup[] {\n  const declarationGroups: DeclarationGroup[] = [];\n  let currentGroup: DeclarationGroup | undefined;\n\n  forEachLine(document, (line) => {\n    if (isDeclarationLine(line)) {\n      const itemLength = getLineItemLength(line.text);\n\n      if (!currentGroup) {\n        currentGroup = {\n          longestItemLength: itemLength,\n          lineStart: line.lineNumber,\n          lineEnd: 0,\n        };\n      } else if (currentGroup.longestItemLength < itemLength) {\n        currentGroup.longestItemLength = itemLength;\n      }\n    } else {\n      if (currentGroup) {\n        currentGroup.lineEnd = line.lineNumber - 1;\n        declarationGroups.push(currentGroup);\n        currentGroup = undefined;\n      }\n    }\n  });\n\n  return declarationGroups;\n}\n"],"sourceRoot":""}