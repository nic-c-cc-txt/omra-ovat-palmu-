"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tokenizer_1 = require("../src/parser/tokenizer");
test('pipe token', () => {
    let tokenizer = tokenizer_1.getTokens('|');
    expect(tokenizer.next().value).toEqual({ type: 124 /* Pipe */, value: '|', position: { line: 0, character: 0 } });
    expect(tokenizer.next().value).toBeUndefined();
});
test('property def', () => {
    let tokenizer = tokenizer_1.getTokens('#PROPERTYDEF');
    expect(tokenizer.next().value).toEqual({ type: 35 /* NumberSign */, value: '#', position: { line: 0, character: 0 } });
    expect(tokenizer.next().value).toEqual({ type: 1 /* Alphanumeric */, value: 'PROPERTYDEF', position: { line: 0, character: 1 } });
    expect(tokenizer.next().value).toBeUndefined();
});
test('property def full', () => {
    let tokenizer = tokenizer_1.getTokens('\t#PROPERTYDEF dummy\t\t\tclass = String\tpublic position = 2');
    expect(tokenizer.next().value).toEqual({ type: 11 /* Tab */, value: '\t', position: { line: 0, character: 0 } });
    expect(tokenizer.next().value).toEqual({ type: 35 /* NumberSign */, value: '#', position: { line: 0, character: 1 } });
    expect(tokenizer.next().value).toEqual({ type: 1 /* Alphanumeric */, value: 'PROPERTYDEF', position: { line: 0, character: 2 } });
    expect(tokenizer.next().value).toEqual({ type: 32 /* Space */, value: ' ', position: { line: 0, character: 13 } });
    expect(tokenizer.next().value).toEqual({ type: 1 /* Alphanumeric */, value: 'dummy', position: { line: 0, character: 14 } });
    expect(tokenizer.next().value).toEqual({ type: 11 /* Tab */, value: '\t', position: { line: 0, character: 19 } });
    expect(tokenizer.next().value).toEqual({ type: 11 /* Tab */, value: '\t', position: { line: 0, character: 20 } });
    expect(tokenizer.next().value).toEqual({ type: 11 /* Tab */, value: '\t', position: { line: 0, character: 21 } });
    expect(tokenizer.next().value).toEqual({ type: 1 /* Alphanumeric */, value: 'class', position: { line: 0, character: 22 } });
    expect(tokenizer.next().value).toEqual({ type: 32 /* Space */, value: ' ', position: { line: 0, character: 27 } });
    expect(tokenizer.next().value).toEqual({ type: 61 /* EqualSign */, value: '=', position: { line: 0, character: 28 } });
    expect(tokenizer.next().value).toEqual({ type: 32 /* Space */, value: ' ', position: { line: 0, character: 29 } });
    expect(tokenizer.next().value).toEqual({ type: 1 /* Alphanumeric */, value: 'String', position: { line: 0, character: 30 } });
    expect(tokenizer.next().value).toEqual({ type: 11 /* Tab */, value: '\t', position: { line: 0, character: 36 } });
    expect(tokenizer.next().value).toEqual({ type: 1 /* Alphanumeric */, value: 'public', position: { line: 0, character: 37 } });
    expect(tokenizer.next().value).toEqual({ type: 32 /* Space */, value: ' ', position: { line: 0, character: 43 } });
    expect(tokenizer.next().value).toEqual({ type: 1 /* Alphanumeric */, value: 'position', position: { line: 0, character: 44 } });
    expect(tokenizer.next().value).toEqual({ type: 32 /* Space */, value: ' ', position: { line: 0, character: 52 } });
    expect(tokenizer.next().value).toEqual({ type: 61 /* EqualSign */, value: '=', position: { line: 0, character: 53 } });
    expect(tokenizer.next().value).toEqual({ type: 32 /* Space */, value: ' ', position: { line: 0, character: 54 } });
    expect(tokenizer.next().value).toEqual({ type: 2 /* Numeric */, value: '2', position: { line: 0, character: 55 } });
    expect(tokenizer.next().value).toBeUndefined();
});
test('numeric', () => {
    let tokenizer = tokenizer_1.getTokens('1');
    expect(tokenizer.next().value).toEqual({ type: 2 /* Numeric */, value: '1', position: { line: 0, character: 0 } });
    expect(tokenizer.next().value).toBeUndefined();
});
test('whitespace', () => {
    let tabTokenizer = tokenizer_1.getTokens('\t');
    expect(tabTokenizer.next().value).toEqual({ type: 11 /* Tab */, value: '\t', position: { line: 0, character: 0 } });
    expect(tabTokenizer.next().value).toBeUndefined();
    let spaceTokenizer = tokenizer_1.getTokens('  ');
    expect(spaceTokenizer.next().value).toEqual({ type: 32 /* Space */, value: ' ', position: { line: 0, character: 0 } });
    expect(spaceTokenizer.next().value).toEqual({ type: 32 /* Space */, value: ' ', position: { line: 0, character: 1 } });
    expect(spaceTokenizer.next().value).toBeUndefined();
});
test('line comment', () => {
    let tokenizer = tokenizer_1.getTokens('//line comment');
    expect(tokenizer.next().value).toEqual({ type: 6 /* LineCommentInit */, value: '//', position: { line: 0, character: 0 } });
    expect(tokenizer.next().value).toEqual({ type: 3 /* LineComment */, value: 'line comment', position: { line: 0, character: 2 } });
    expect(tokenizer.next().value).toBeUndefined();
    tokenizer = tokenizer_1.getTokens('//line comment\nword');
    expect(tokenizer.next().value).toEqual({ type: 6 /* LineCommentInit */, value: '//', position: { line: 0, character: 0 } });
    expect(tokenizer.next().value).toEqual({ type: 3 /* LineComment */, value: 'line comment', position: { line: 0, character: 2 } });
    expect(tokenizer.next().value).toEqual({ type: 13 /* NewLine */, value: '\n', position: { line: 0, character: 14 } });
    expect(tokenizer.next().value).toEqual({ type: 1 /* Alphanumeric */, value: 'word', position: { line: 1, character: 0 } });
    expect(tokenizer.next().value).toBeUndefined();
    tokenizer = tokenizer_1.getTokens('///*line comment*/');
    expect(tokenizer.next().value).toEqual({ type: 6 /* LineCommentInit */, value: '//', position: { line: 0, character: 0 } });
    expect(tokenizer.next().value).toEqual({ type: 3 /* LineComment */, value: '/*line comment*/', position: { line: 0, character: 2 } });
    expect(tokenizer.next().value).toBeUndefined();
    tokenizer = tokenizer_1.getTokens('//\n');
    expect(tokenizer.next().value).toEqual({ type: 6 /* LineCommentInit */, value: '//', position: { line: 0, character: 0 } });
    expect(tokenizer.next().value).toEqual({ type: 3 /* LineComment */, value: '', position: { line: 0, character: 2 } });
    expect(tokenizer.next().value).toEqual({ type: 13 /* NewLine */, value: '\n', position: { line: 0, character: 2 } });
    expect(tokenizer.next().value).toBeUndefined();
});
test('block comment', () => {
    let tokenizer = tokenizer_1.getTokens('/*a block* / comment*/ alphanumeric');
    expect(tokenizer.next().value).toEqual({ type: 7 /* BlockCommentInit */, value: '/*', position: { line: 0, character: 0 } });
    expect(tokenizer.next().value).toEqual({ type: 4 /* BlockComment */, value: 'a block* / comment', position: { line: 0, character: 2 } });
    expect(tokenizer.next().value).toEqual({ type: 8 /* BlockCommentTerm */, value: '*/', position: { line: 0, character: 20 } });
    expect(tokenizer.next().value).toEqual({ type: 32 /* Space */, value: ' ', position: { line: 0, character: 22 } });
    expect(tokenizer.next().value).toEqual({ type: 1 /* Alphanumeric */, value: 'alphanumeric', position: { line: 0, character: 23 } });
    expect(tokenizer.next().value).toBeUndefined();
    tokenizer = tokenizer_1.getTokens('/**/');
    expect(tokenizer.next().value).toEqual({ type: 7 /* BlockCommentInit */, value: '/*', position: { line: 0, character: 0 } });
    expect(tokenizer.next().value).toEqual({ type: 4 /* BlockComment */, value: '', position: { line: 0, character: 2 } });
    expect(tokenizer.next().value).toEqual({ type: 8 /* BlockCommentTerm */, value: '*/', position: { line: 0, character: 2 } });
    expect(tokenizer.next().value).toBeUndefined();
});
test('documentation block comment', () => {
    let tokenizer = tokenizer_1.getTokens('\t/*DOC -----------------------------------------------------------------\n\tdocumentation\n\t** ENDDOC */');
    expect(tokenizer.next().value).toEqual({ type: 11 /* Tab */, value: '\t', position: { line: 0, character: 0 } });
    expect(tokenizer.next().value).toEqual({ type: 7 /* BlockCommentInit */, value: '/*', position: { line: 0, character: 1 } });
    expect(tokenizer.next().value).toEqual({ type: 4 /* BlockComment */, value: 'DOC -----------------------------------------------------------------\n\tdocumentation\n\t** ENDDOC ', position: { line: 0, character: 3 } });
    expect(tokenizer.next().value).toEqual({ type: 8 /* BlockCommentTerm */, value: '*/', position: { line: 2, character: 11 } });
    expect(tokenizer.next().value).toBeUndefined();
});
test('string', () => {
    let tokenizer = tokenizer_1.getTokens('"this is a string"');
    expect(tokenizer.next().value).toEqual({ type: 9 /* DoubleQuotes */, value: '"', position: { line: 0, character: 0 } });
    expect(tokenizer.next().value).toEqual({ type: 5 /* String */, value: 'this is a string', position: { line: 0, character: 1 } });
    expect(tokenizer.next().value).toEqual({ type: 9 /* DoubleQuotes */, value: '"', position: { line: 0, character: 17 } });
    expect(tokenizer.next().value).toBeUndefined();
    tokenizer = tokenizer_1.getTokens('"string"alphanumeric"');
    expect(tokenizer.next().value).toEqual({ type: 9 /* DoubleQuotes */, value: '"', position: { line: 0, character: 0 } });
    expect(tokenizer.next().value).toEqual({ type: 5 /* String */, value: 'string', position: { line: 0, character: 1 } });
    expect(tokenizer.next().value).toEqual({ type: 9 /* DoubleQuotes */, value: '"', position: { line: 0, character: 7 } });
    expect(tokenizer.next().value).toEqual({ type: 1 /* Alphanumeric */, value: 'alphanumeric', position: { line: 0, character: 8 } });
    expect(tokenizer.next().value).toEqual({ type: 9 /* DoubleQuotes */, value: '"', position: { line: 0, character: 20 } });
    expect(tokenizer.next().value).toEqual({ type: 5 /* String */, value: '', position: { line: 0, character: 21 } });
    expect(tokenizer.next().value).toBeUndefined();
    tokenizer = tokenizer_1.getTokens('""');
    expect(tokenizer.next().value).toEqual({ type: 9 /* DoubleQuotes */, value: '"', position: { line: 0, character: 0 } });
    expect(tokenizer.next().value).toEqual({ type: 5 /* String */, value: '', position: { line: 0, character: 1 } });
    expect(tokenizer.next().value).toEqual({ type: 9 /* DoubleQuotes */, value: '"', position: { line: 0, character: 1 } });
    expect(tokenizer.next().value).toBeUndefined();
    tokenizer = tokenizer_1.getTokens('"eggs\nflour\nmilk"');
    expect(tokenizer.next().value).toEqual({ type: 9 /* DoubleQuotes */, value: '"', position: { line: 0, character: 0 } });
    expect(tokenizer.next().value).toEqual({ type: 5 /* String */, value: 'eggs\nflour\nmilk', position: { line: 0, character: 1 } });
    expect(tokenizer.next().value).toEqual({ type: 9 /* DoubleQuotes */, value: '"', position: { line: 2, character: 4 } });
    expect(tokenizer.next().value).toBeUndefined();
});
test('carriage return line feed', () => {
    let tokenizer = tokenizer_1.getTokens('\r\n');
    let tokens = [];
    for (let token of tokenizer) {
        tokens.push(token);
    }
    expect(tokens).toHaveLength(2);
    expect(tokens[0].value).toBe('\r');
});
test('comment newline', () => {
    let tokenizer = tokenizer_1.getTokens('// this is a comment\n');
    let tokens = [];
    for (let token of tokenizer) {
        tokens.push(token);
    }
    expect(tokens[0].type).toBe(6 /* LineCommentInit */);
    expect(tokens[1].type).toBe(3 /* LineComment */);
    expect(tokens[1].value).toBe(' this is a comment');
    expect(tokens[2].type).toBe(13 /* NewLine */);
});
test('comment with semicolon', () => {
    let tokenizer = tokenizer_1.getTokens('; this is a comment\n');
    let tokens = [];
    for (let token of tokenizer) {
        tokens.push(token);
    }
    expect(tokens[0].type).toBe(6 /* LineCommentInit */);
    expect(tokens[1].type).toBe(3 /* LineComment */);
    expect(tokens[1].value).toBe(' this is a comment');
    expect(tokens[2].type).toBe(13 /* NewLine */);
});
//# sourceMappingURL=data:application/json;base64,