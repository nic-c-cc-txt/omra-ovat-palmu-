{"version":3,"sources":["webpack://fast-zip/./src/extension.ts","webpack://fast-zip/external \"child_process\"","webpack://fast-zip/external \"util\"","webpack://fast-zip/external \"vscode\"","webpack://fast-zip/webpack/bootstrap","webpack://fast-zip/webpack/startup"],"names":["promiseExec","util","promisify","exec","activate","context","disposable","vscode","commands","registerCommand","rename","console","log","window","showInputBox","prompt","placeHolder","folderList","workspace","workspaceFolders","showErrorMessage","folder","showInformationMessage","name","cwd","uri","fsPath","err","subscriptions","push","deactivate","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call"],"mappings":"6cAAA,eACA,SACA,SACMA,EAAcC,EAAKC,UAAU,EAAAC,MAgD1B,EAAAC,SAdSC,IAChB,MAAMC,EAAaC,EAAOC,SAASC,gBACjC,+BACA,IAAY,OAAD,6BAxBM,IAAOC,EAyBtBC,QAAQC,IAAI,SAzBUF,QAXE,OAAD,6BAM3B,aADqBH,EAAOM,OAAOC,aAJnB,CACdC,OAAQ,eACRC,YAAa,gBAQ0C,OAAD,6BACxD,MAAMC,EAAaV,EAAOW,UAAUC,iBAEpC,IAAKF,EAEH,YADAV,EAAOM,OAAOO,iBAAiB,wBAIjC,MAAMC,EAASJ,EAAW,GAE1B,IACEV,EAAOM,OAAOS,uBAAuB,iBAC/BtB,EAAY,kBAAkBU,GAAUW,EAAOE,iBAAkB,CACrEC,IAAKH,EAAOI,IAAIC,SAElB,MAAOC,GACPpB,EAAOM,OAAOO,iBAAiB,oBAEjCb,EAAOM,OAAOS,uBAAuB,gBAYrCjB,EAAQuB,cAAcC,KAAKvB,IAKV,EAAAwB,WAFA,Q,QCjDnBC,EAAOC,QAAUC,QAAQ,kB,QCAzBF,EAAOC,QAAUC,QAAQ,S,QCAzBF,EAAOC,QAAUC,QAAQ,YCCrBC,EAA2B,GCE/B,ODCA,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUJ,QAG3C,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAK,EAAoBD,GAAUE,KAAKP,EAAOC,QAASD,EAAQA,EAAOC,QAASG,GAGpEJ,EAAOC,QCjBRG,CAAoB,M","file":"extension.js","sourcesContent":["import * as vscode from 'vscode'\nimport * as util from 'util'\nimport { exec } from 'child_process'\nconst promiseExec = util.promisify(exec)\n\nconst getRename = async () => {\n  const options = {\n    prompt: '请输入压缩后的文件名: ',\n    placeHolder: '默认为选中文件名',\n  }\n  const rename = await vscode.window.showInputBox(options)\n  return rename\n}\n\n// 添加密码功能\n\nconst zipWorkSpace = async (rename: string | undefined) => {\n  const folderList = vscode.workspace.workspaceFolders\n\n  if (!folderList) {\n    vscode.window.showErrorMessage('未检测到项目目录，请打开项目文件夹后重试')\n    return\n  }\n  // 获取 rootPath\n  const folder = folderList[0]\n\n  try {\n    vscode.window.showInformationMessage('开始压缩...')\n    await promiseExec(`git archive -o ${rename || folder.name}.zip  HEAD`, {\n      cwd: folder.uri.fsPath,\n    })\n  } catch (err) {\n    vscode.window.showErrorMessage('压缩出错，请检查是否在项目根目录')\n  }\n  vscode.window.showInformationMessage('压缩好了')\n}\n\nconst activate = (context: vscode.ExtensionContext) => {\n  const disposable = vscode.commands.registerCommand(\n    'zip-work-space.zipWorkSpace',\n    async () => {\n      console.log('插件启动！')\n      const rename = await getRename()\n      zipWorkSpace(rename)\n    }\n  )\n  context.subscriptions.push(disposable)\n}\n\nconst deactivate = () => {}\n\nexport { activate, deactivate }\n","module.exports = require(\"child_process\");;","module.exports = require(\"util\");;","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(112);\n"],"sourceRoot":""}