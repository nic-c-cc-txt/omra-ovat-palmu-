{
	"name": "csharp",
	"publisher": "ms-dotnettools",
	"version": "1.23.11",
	"description": "C# for Visual Studio Code (powered by OmniSharp).",
	"displayName": "C#",
	"author": "Microsoft Corporation",
	"license": "SEE LICENSE IN RuntimeLicenses/license.txt",
	"icon": "images/csharpIcon.png",
	"preview": false,
	"bugs": {
		"url": "https://github.com/OmniSharp/omnisharp-vscode/issues"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/OmniSharp/omnisharp-vscode.git"
	},
	"categories": [
		"Debuggers",
		"Programming Languages",
		"Linters",
		"Snippets"
	],
	"keywords": [
		"multi-root ready",
		".NET",
		"ASP.NET",
		".NET Core",
		"dotnet"
	],
	"defaults": {
		"omniSharp": "1.37.8",
		"razor": "6.0.0-alpha.1.21201.19"
	},
	"main": "./dist/extension",
	"scripts": {
		"vscode:prepublish": "tsc -p ./ && webpack --mode production",
		"compile": "tsc -p ./ && gulp tslint",
		"compileDev": "tsc -p ./ && gulp tslint && webpack --mode development",
		"watch": "tsc -watch -p ./",
		"tdd": "mocha --config ./.mocharc.jsonc --watch --watch-extensions ts test/unitTests/**/*.test.ts*",
		"test": "gulp test",
		"test:unit": "gulp test:unit",
		"test:feature": "gulp test:feature",
		"test:integration": "gulp test:integration",
		"test:integration:singleCsproj": "gulp test:integration:singleCsproj",
		"test:integration:slnWithCsproj": "gulp test:integration:slnWithCsproj",
		"test:integration:slnFilterWithCsproj": "gulp test:integration:slnFilterWithCsproj",
		"test:release": "mocha --config ./.mocharc.jsonc test/releaseTests/**/*.test.ts",
		"test:artifacts": "mocha --config ./.mocharc.jsonc test/artifactTests/**/*.test.ts",
		"postinstall": "node ./node_modules/vscode/bin/install",
		"cov:instrument": "gulp cov:instrument",
		"cov:merge": "gulp cov:merge",
		"cov:merge-html": "gulp cov:merge-html",
		"cov:report": "npm-run-all cov:report:integration cov:report:unit",
		"cov:report:unit": "gulp cov:report:unit",
		"cov:report:integration": "gulp cov:report:integration",
		"unpackage:vsix": "gulp vsix:release:unpackage",
		"gulp": "gulp"
	},
	"nyc": {
		"extends": "@istanbuljs/nyc-config-typescript"
	},
	"dependencies": {
		"async-file": "2.0.2",
		"fs-extra": "7.0.1",
		"http-proxy-agent": "2.1.0",
		"https-proxy-agent": "^3.0.1",
		"jsonc-parser": "3.0.0",
		"microsoft.aspnetcore.razor.vscode": "https://download.visualstudio.microsoft.com/download/pr/92748a92-32fe-4cf9-b6c2-e3d0edacf90d/d2dce097206432dfa3e47d9b09e58c93/microsoft.aspnetcore.razor.vscode-6.0.0-alpha.1.21201.19.tgz",
		"mkdirp": "^1.0.3",
		"node-filter-async": "1.1.1",
		"node-machine-id": "1.1.12",
		"remove-bom-buffer": "3.0.0",
		"request-light": "0.2.4",
		"rxjs": "6.4.0",
		"semver": "5.6.0",
		"stream": "0.0.2",
		"strip-bom": "3.0.0",
		"tmp": "0.0.33",
		"vscode-debugprotocol": "1.33.0",
		"vscode-extension-telemetry": "0.1.6",
		"vscode-languageserver-protocol": "3.16.0",
		"yauzl": "2.10.0"
	},
	"devDependencies": {
		"@istanbuljs/nyc-config-typescript": "1.0.1",
		"@types/archiver": "2.1.2",
		"@types/chai": "4.1.7",
		"@types/chai-arrays": "1.0.2",
		"@types/chai-as-promised": "7.1.0",
		"@types/chai-string": "1.4.1",
		"@types/del": "3.0.1",
		"@types/fs-extra": "5.0.4",
		"@types/gulp": "4.0.5",
		"@types/gulp-mocha": "0.0.32",
		"@types/istanbul": "0.4.30",
		"@types/minimist": "1.2.0",
		"@types/mkdirp": "0.5.2",
		"@types/mocha": "5.2.5",
		"@types/node": "10.12.24",
		"@types/semver": "5.5.0",
		"@types/tmp": "0.0.33",
		"@types/unzipper": "^0.9.1",
		"@types/yauzl": "2.9.1",
		"archiver": "3.0.0",
		"async-child-process": "1.1.1",
		"async-shelljs": "0.1.2",
		"chai": "4.2.0",
		"chai-arrays": "2.0.0",
		"chai-as-promised": "7.1.1",
		"chai-fs": "2.0.0",
		"chai-string": "1.5.0",
		"codecov": "3.7.1",
		"copyfiles": "^2.3.0",
		"cross-env": "5.2.0",
		"del": "3.0.0",
		"find-versions": "3.0.0",
		"get-port": "4.1.0",
		"glob-promise": "3.4.0",
		"gulp": "4.0.0",
		"gulp-mocha": "6.0.0",
		"gulp-tslint": "8.1.3",
		"istanbul": "0.4.5",
		"ltcdr": "2.2.1",
		"mocha": "^8.1.1",
		"mocha-typescript": "1.1.17",
		"mock-fs": "4.8.0",
		"mock-http-server": "0.2.0",
		"natives": "1.1.6",
		"npm-run-all": "4.1.5",
		"nyc": "15.0.1",
		"plist": "3.0.1",
		"remap-istanbul": "0.13.0",
		"source-map-support": "0.5.10",
		"ts-loader": "5.3.3",
		"ts-node": "8.0.2",
		"tslint": "5.12.1",
		"tslint-microsoft-contrib": "6.0.0",
		"tslint-no-unused-expression-chai": "0.1.4",
		"typescript": "^3.8.3",
		"unzipper": "0.9.10",
		"vsce": "1.57.0",
		"vscode": "1.1.37",
		"webpack": "5.30.0",
		"webpack-cli": "4.6.0"
	},
	"runtimeDependencies": [
		{
			"id": "OmniSharp",
			"description": "OmniSharp for Windows (.NET 4.6 / x86)",
			"url": "https://download.visualstudio.microsoft.com/download/pr/9166c456-55b4-4c77-92e5-92c9314f8eeb/885a7da9c9a450445006b389a7e473d7/omnisharp-win-x86-1.37.8.zip",
			"fallbackUrl": "https://roslynomnisharp.blob.core.windows.net/releases/1.37.8/omnisharp-win-x86-1.37.8.zip",
			"installPath": ".omnisharp/1.37.8",
			"platforms": [
				"win32"
			],
			"architectures": [
				"x86"
			],
			"installTestPath": "./.omnisharp/1.37.8/OmniSharp.exe",
			"platformId": "win-x86",
			"integrity": "96D95AE63FF2ED84C467B73D86AF108C536F7479CFE4E277C481B8875482684F"
		},
		{
			"id": "OmniSharp",
			"description": "OmniSharp for Windows (.NET 4.6 / x64)",
			"url": "https://download.visualstudio.microsoft.com/download/pr/9166c456-55b4-4c77-92e5-92c9314f8eeb/4fdbe776755c2467591dcba0a900ed32/omnisharp-win-x64-1.37.8.zip",
			"fallbackUrl": "https://roslynomnisharp.blob.core.windows.net/releases/1.37.8/omnisharp-win-x64-1.37.8.zip",
			"installPath": ".omnisharp/1.37.8",
			"platforms": [
				"win32"
			],
			"architectures": [
				"x86_64"
			],
			"installTestPath": "./.omnisharp/1.37.8/OmniSharp.exe",
			"platformId": "win-x64",
			"integrity": "4780414FF3C5B10469BD154E506245E3D9CC25A4C9021109391E90B70054C3A7"
		},
		{
			"id": "OmniSharp",
			"description": "OmniSharp for OSX",
			"url": "https://download.visualstudio.microsoft.com/download/pr/9166c456-55b4-4c77-92e5-92c9314f8eeb/b08d8706dbdfe32fe3413c5b9bc6365a/omnisharp-osx-1.37.8.zip",
			"fallbackUrl": "https://roslynomnisharp.blob.core.windows.net/releases/1.37.8/omnisharp-osx-1.37.8.zip",
			"installPath": ".omnisharp/1.37.8",
			"platforms": [
				"darwin"
			],
			"binaries": [
				"./mono.osx",
				"./run"
			],
			"installTestPath": "./.omnisharp/1.37.8/run",
			"platformId": "osx",
			"integrity": "147AED153860BF9C7454B4571C00A649E95014E0D0CC894B836CFC24B5A18CA7"
		},
		{
			"id": "OmniSharp",
			"description": "OmniSharp for Linux (x86)",
			"url": "https://download.visualstudio.microsoft.com/download/pr/9166c456-55b4-4c77-92e5-92c9314f8eeb/24d7c6ffbf8e03d6292faed97f5e4286/omnisharp-linux-x86-1.37.8.zip",
			"fallbackUrl": "https://roslynomnisharp.blob.core.windows.net/releases/1.37.8/omnisharp-linux-x86-1.37.8.zip",
			"installPath": ".omnisharp/1.37.8",
			"platforms": [
				"linux"
			],
			"architectures": [
				"x86",
				"i686"
			],
			"binaries": [
				"./mono.linux-x86",
				"./run"
			],
			"installTestPath": "./.omnisharp/1.37.8/run",
			"platformId": "linux-x86",
			"integrity": "34A5B6477507606FE04A67F857B0B5E749D25EBB7D4F95EE2539DFF249BB42C3"
		},
		{
			"id": "OmniSharp",
			"description": "OmniSharp for Linux (x64)",
			"url": "https://download.visualstudio.microsoft.com/download/pr/9166c456-55b4-4c77-92e5-92c9314f8eeb/001b960216f0287efd3c7147718ecc03/omnisharp-linux-x64-1.37.8.zip",
			"fallbackUrl": "https://roslynomnisharp.blob.core.windows.net/releases/1.37.8/omnisharp-linux-x64-1.37.8.zip",
			"installPath": ".omnisharp/1.37.8",
			"platforms": [
				"linux"
			],
			"architectures": [
				"x86_64"
			],
			"binaries": [
				"./mono.linux-x86_64",
				"./run"
			],
			"installTestPath": "./.omnisharp/1.37.8/run",
			"platformId": "linux-x64",
			"integrity": "E3E1452E689EAFC73ECC0BC19DABEA483F70C64A2C34363BEA49237EE8F8B470"
		},
		{
			"id": "Debugger",
			"description": ".NET Core Debugger (Windows / x64)",
			"url": "https://download.visualstudio.microsoft.com/download/pr/22843236-af09-4293-9d23-ca35003ca60a/8ef4bedc8923b38b9a6ab98d7ec2df16/coreclr-debug-win7-x64.zip",
			"fallbackUrl": "https://vsdebugger.blob.core.windows.net/coreclr-debug-1-23-9/coreclr-debug-win7-x64.zip",
			"installPath": ".debugger",
			"platforms": [
				"win32"
			],
			"architectures": [
				"x86_64"
			],
			"installTestPath": "./.debugger/vsdbg-ui.exe",
			"integrity": "52D76850494F1F6B04B9CABB4C80B9E63C0762BFA676CFDD16292EBC77462989"
		},
		{
			"id": "Debugger",
			"description": ".NET Core Debugger (macOS / x64)",
			"url": "https://download.visualstudio.microsoft.com/download/pr/22843236-af09-4293-9d23-ca35003ca60a/c091f9f76df625e2f6cbae32521c7149/coreclr-debug-osx-x64.zip",
			"fallbackUrl": "https://vsdebugger.blob.core.windows.net/coreclr-debug-1-23-9/coreclr-debug-osx-x64.zip",
			"installPath": ".debugger",
			"platforms": [
				"darwin"
			],
			"architectures": [
				"x86_64",
				"arm64"
			],
			"binaries": [
				"./vsdbg-ui",
				"./vsdbg"
			],
			"installTestPath": "./.debugger/vsdbg-ui",
			"integrity": "E728CB6D8374D6F8BD75B23D352CB3C9B30C202C94F928AFB425E0A1CECEB54A"
		},
		{
			"id": "Debugger",
			"description": ".NET Core Debugger (linux / ARM)",
			"url": "https://download.visualstudio.microsoft.com/download/pr/22843236-af09-4293-9d23-ca35003ca60a/83983aa140267cbf90b3780dfdf640a8/coreclr-debug-linux-arm.zip",
			"fallbackUrl": "https://vsdebugger.blob.core.windows.net/coreclr-debug-1-23-9/coreclr-debug-linux-arm.zip",
			"installPath": ".debugger",
			"platforms": [
				"linux"
			],
			"architectures": [
				"arm"
			],
			"binaries": [
				"./vsdbg-ui",
				"./vsdbg"
			],
			"installTestPath": "./.debugger/vsdbg-ui",
			"integrity": "9CCDD89F495BF8FD2168FBD9D15730B1F98CD03CB2EFC74F57FCA9AD22E278DD"
		},
		{
			"id": "Debugger",
			"description": ".NET Core Debugger (linux / ARM64)",
			"url": "https://download.visualstudio.microsoft.com/download/pr/22843236-af09-4293-9d23-ca35003ca60a/bfa6b939db12aacd40cf2ebda28b621d/coreclr-debug-linux-arm64.zip",
			"fallbackUrl": "https://vsdebugger.blob.core.windows.net/coreclr-debug-1-23-9/coreclr-debug-linux-arm64.zip",
			"installPath": ".debugger",
			"platforms": [
				"linux"
			],
			"architectures": [
				"arm64"
			],
			"binaries": [
				"./vsdbg-ui",
				"./vsdbg"
			],
			"installTestPath": "./.debugger/vsdbg-ui",
			"integrity": "BF4C56C6A74175AC02C4DD96A1602457B318D7FE6309B1331FB535F7DF42E01D"
		},
		{
			"id": "Debugger",
			"description": ".NET Core Debugger (linux / x64)",
			"url": "https://download.visualstudio.microsoft.com/download/pr/22843236-af09-4293-9d23-ca35003ca60a/5736b04572b255dee1c529cc41623a4b/coreclr-debug-linux-x64.zip",
			"fallbackUrl": "https://vsdebugger.blob.core.windows.net/coreclr-debug-1-23-9/coreclr-debug-linux-x64.zip",
			"installPath": ".debugger",
			"platforms": [
				"linux"
			],
			"architectures": [
				"x86_64"
			],
			"binaries": [
				"./vsdbg-ui",
				"./vsdbg"
			],
			"installTestPath": "./.debugger/vsdbg-ui",
			"integrity": "29F5ABE6D317F956F0BCBF86C1344FD298D66F276597F6A0E15B5462CA8122A7"
		},
		{
			"id": "Razor",
			"description": "Razor Language Server (Windows / x64)",
			"url": "https://download.visualstudio.microsoft.com/download/pr/92748a92-32fe-4cf9-b6c2-e3d0edacf90d/32982b98737ab510fb2f840e6271b668/razorlanguageserver-win-x64-6.0.0-alpha.1.21201.19.zip",
			"installPath": ".razor",
			"platforms": [
				"win32"
			],
			"architectures": [
				"x86_64"
			]
		},
		{
			"id": "Razor",
			"description": "Razor Language Server (Windows / x86)",
			"url": "https://download.visualstudio.microsoft.com/download/pr/92748a92-32fe-4cf9-b6c2-e3d0edacf90d/d44b829f47f1227c021f0c00acc22e2e/razorlanguageserver-win-x86-6.0.0-alpha.1.21201.19.zip",
			"installPath": ".razor",
			"platforms": [
				"win32"
			],
			"architectures": [
				"x86"
			]
		},
		{
			"id": "Razor",
			"description": "Razor Language Server (Linux / x64)",
			"url": "https://download.visualstudio.microsoft.com/download/pr/92748a92-32fe-4cf9-b6c2-e3d0edacf90d/edb3faa70dfc2896bc656a379538f5cc/razorlanguageserver-linux-x64-6.0.0-alpha.1.21201.19.zip",
			"installPath": ".razor",
			"platforms": [
				"linux"
			],
			"architectures": [
				"x86_64"
			],
			"binaries": [
				"./rzls"
			]
		},
		{
			"id": "Razor",
			"description": "Razor Language Server (macOS / x64)",
			"url": "https://download.visualstudio.microsoft.com/download/pr/92748a92-32fe-4cf9-b6c2-e3d0edacf90d/43ccc87635d42521809c69061b4ec787/razorlanguageserver-osx-x64-6.0.0-alpha.1.21201.19.zip",
			"installPath": ".razor",
			"platforms": [
				"darwin"
			],
			"architectures": [
				"x86_64"
			],
			"binaries": [
				"./rzls"
			]
		}
	],
	"engines": {
		"vscode": "^1.44.0"
	},
	"activationEvents": [
		"onDebugInitialConfigurations",
		"onDebugResolve:blazorwasm",
		"onDebugResolve:coreclr",
		"onDebugResolve:clr",
		"onLanguage:csharp",
		"onLanguage:aspnetcorerazor",
		"onCommand:o.restart",
		"onCommand:o.pickProjectAndStart",
		"onCommand:o.showOutput",
		"onCommand:dotnet.restore.project",
		"onCommand:dotnet.restore.all",
		"onCommand:dotnet.generateAssets",
		"onCommand:csharp.downloadDebugger",
		"onCommand:csharp.listProcess",
		"onCommand:csharp.listRemoteProcess",
		"onCommand:omnisharp.registerLanguageMiddleware",
		"workspaceContains:project.json",
		"workspaceContains:*.csproj",
		"workspaceContains:*.sln",
		"workspaceContains:*.slnf",
		"workspaceContains:*.csx",
		"workspaceContains:*.cake",
		"workspaceContains:**/*.csproj",
		"workspaceContains:**/*.sln",
		"workspaceContains:**/*.slnf",
		"workspaceContains:**/*.csx",
		"workspaceContains:**/*.cake"
	],
	"contributes": {
		"themes": [
			{
				"label": "Visual Studio 2019 Dark",
				"uiTheme": "vs-dark",
				"path": "./themes/vs2019_dark.json"
			},
			{
				"label": "Visual Studio 2019 Light",
				"uiTheme": "vs",
				"path": "./themes/vs2019_light.json"
			}
		],
		"configuration": {
			"title": "C# configuration",
			"properties": {
				"csharp.format.enable": {
					"type": "boolean",
					"default": true,
					"description": "Enable/disable default C# formatter (requires restart)."
				},
				"csharp.suppressDotnetInstallWarning": {
					"type": "boolean",
					"default": false,
					"description": "Suppress the warning that the .NET Core SDK is not on the path."
				},
				"csharp.unitTestDebuggingOptions": {
					"type": "object",
					"description": "Options to use with the debugger when launching for unit test debugging. Any launch.json option is valid here.",
					"default": {},
					"properties": {
						"sourceFileMap": {
							"type": "object",
							"description": "Optional source file mappings passed to the debug engine. Example: '{ \"C:\\foo\":\"/home/user/foo\" }'",
							"additionalProperties": {
								"type": "string"
							},
							"default": {
								"<insert-source-path-here>": "<insert-target-path-here>"
							}
						},
						"justMyCode": {
							"type": "boolean",
							"description": "Optional flag to only show user code.",
							"default": true
						},
						"requireExactSource": {
							"type": "boolean",
							"description": "Optional flag to require current source code to match the pdb.",
							"default": true
						},
						"enableStepFiltering": {
							"type": "boolean",
							"description": "Optional flag to enable stepping over Properties and Operators.",
							"default": true
						},
						"logging": {
							"description": "Optional flags to determine what types of messages should be logged to the output window.",
							"type": "object",
							"required": [],
							"default": {},
							"properties": {
								"exceptions": {
									"type": "boolean",
									"description": "Optional flag to determine whether exception messages should be logged to the output window.",
									"default": true
								},
								"moduleLoad": {
									"type": "boolean",
									"description": "Optional flag to determine whether module load events should be logged to the output window.",
									"default": true
								},
								"programOutput": {
									"type": "boolean",
									"description": "Optional flag to determine whether program output should be logged to the output window when not using an external console.",
									"default": true
								},
								"engineLogging": {
									"type": "boolean",
									"description": "Optional flag to determine whether diagnostic engine logs should be logged to the output window.",
									"default": false
								},
								"browserStdOut": {
									"type": "boolean",
									"description": "Optional flag to determine if stdout text from the launching the web browser should be logged to the output window.",
									"default": true
								},
								"elapsedTiming": {
									"type": "boolean",
									"description": "If true, engine logging will include `adapterElapsedTime` and `engineElapsedTime` properties to indicate the amount of time, in microseconds, that a request took.",
									"default": false
								},
								"threadExit": {
									"type": "boolean",
									"description": "Controls if a message is logged when a thread in the target process exits. Default: `false`.",
									"default": false
								},
								"processExit": {
									"type": "boolean",
									"description": "Controls if a message is logged when the target process exits, or debugging is stopped. Default: `true`.",
									"default": true
								}
							}
						},
						"suppressJITOptimizations": {
							"type": "boolean",
							"description": "If true, when an optimized module (.dll compiled in the Release configuration) loads in the target process, the debugger will ask the Just-In-Time compiler to generate code with optimizations disabled. For more information: https://aka.ms/VSCode-CS-LaunchJson#suppress-jit-optimizations",
							"default": false
						},
						"symbolOptions": {
							"description": "Options to control how symbols (.pdb files) are found and loaded.",
							"default": {
								"searchPaths": [],
								"searchMicrosoftSymbolServer": false,
								"searchNuGetOrgSymbolServer": false
							},
							"type": "object",
							"properties": {
								"searchPaths": {
									"type": "array",
									"items": {
										"type": "string"
									},
									"description": "Array of symbol server URLs (example: http​://MyExampleSymbolServer) or directories (example: /build/symbols) to search for .pdb files. These directories will be searched in addition to the default locations -- next to the module and the path where the pdb was originally dropped to.",
									"default": []
								},
								"searchMicrosoftSymbolServer": {
									"type": "boolean",
									"description": "If 'true' the Microsoft Symbol server (https​://msdl.microsoft.com​/download/symbols) is added to the symbols search path. If unspecified, this option defaults to 'false'.",
									"default": false
								},
								"searchNuGetOrgSymbolServer": {
									"type": "boolean",
									"description": "If 'true' the NuGet.org symbol server (https​://symbols.nuget.org​/download/symbols) is added to the symbols search path. If unspecified, this option defaults to 'false'.",
									"default": false
								},
								"cachePath": {
									"type": "string",
									"description": "Directory where symbols downloaded from symbol servers should be cached. If unspecified, on Windows the debugger will default to %TEMP%\\SymbolCache, and on Linux and macOS the debugger will default to ~/.dotnet/symbolcache.",
									"default": "~/.dotnet/symbolcache"
								},
								"moduleFilter": {
									"description": "Provides options to control which modules (.dll files) the debugger will attempt to load symbols (.pdb files) for.",
									"default": {
										"mode": "loadAllButExcluded",
										"excludedModules": []
									},
									"type": "object",
									"required": [
										"mode"
									],
									"properties": {
										"mode": {
											"type": "string",
											"enum": [
												"loadAllButExcluded",
												"loadOnlyIncluded"
											],
											"enumDescriptions": [
												"Load symbols for all modules unless the module is in the 'excludedModules' array.",
												"Do not attempt to load symbols for ANY module unless it is in the 'includedModules' array, or it is included through the 'includeSymbolsNextToModules' setting."
											],
											"description": "Controls which of the two basic operating modes the module filter operates in.",
											"default": "loadAllButExcluded"
										},
										"excludedModules": {
											"type": "array",
											"items": {
												"type": "string"
											},
											"description": "Array of modules that the debugger should NOT load symbols for. Wildcards (example: MyCompany.*.dll) are supported.\n\nThis property is ignored unless 'mode' is set to 'loadAllButExcluded'.",
											"default": []
										},
										"includedModules": {
											"type": "array",
											"items": {
												"type": "string"
											},
											"description": "Array of modules that the debugger should load symbols for. Wildcards (example: MyCompany.*.dll) are supported.\n\nThis property is ignored unless 'mode' is set to 'loadOnlyIncluded'.",
											"default": [
												"MyExampleModule.dll"
											]
										},
										"includeSymbolsNextToModules": {
											"type": "boolean",
											"description": "If true, for any module NOT in the 'includedModules' array, the debugger will still check next to the module itself and the launching executable, but it will not check paths on the symbol search list. This option defaults to 'true'.\n\nThis property is ignored unless 'mode' is set to 'loadOnlyIncluded'.",
											"default": true
										}
									}
								}
							}
						},
						"sourceLinkOptions": {
							"description": "Options to control how Source Link connects to web servers. For more information: https://aka.ms/VSCode-CS-LaunchJson#source-link-options",
							"default": {
								"*": {
									"enabled": true
								}
							},
							"type": "object",
							"additionalItems": {
								"type": "object",
								"properties": {
									"enabled": {
										"title": "boolean",
										"description": "Is Source Link enabled for this URL?  If unspecified, this option defaults to 'true'.",
										"default": "true"
									}
								}
							}
						},
						"allowFastEvaluate": {
							"type": "boolean",
							"description": "When true (the default state), the debugger will attempt faster evaluation by simulating execution of simple properties and methods.",
							"default": true
						},
						"type": {
							"type": "string",
							"enum": [
								"coreclr",
								"clr"
							],
							"description": "Type type of code to debug. Can be either 'coreclr' for .NET Core debugging, or 'clr' for Desktop .NET Framework. 'clr' only works on Windows as the Desktop framework is Windows-only.",
							"default": "coreclr"
						},
						"debugServer": {
							"type": "number",
							"description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
							"default": 4711
						}
					}
				},
				"csharp.suppressDotnetRestoreNotification": {
					"type": "boolean",
					"default": false,
					"description": "Suppress the notification window to perform a 'dotnet restore' when dependencies can't be resolved."
				},
				"csharp.suppressProjectJsonWarning": {
					"type": "boolean",
					"default": false,
					"description": "Suppress the warning that project.json is no longer a supported project format for .NET Core applications"
				},
				"csharp.suppressBuildAssetsNotification": {
					"type": "boolean",
					"default": false,
					"description": "Suppress the notification window to add missing assets to build or debug the application."
				},
				"csharp.suppressHiddenDiagnostics": {
					"type": "boolean",
					"default": true,
					"description": "Suppress 'hidden' diagnostics (such as 'unnecessary using directives') from appearing in the editor or the Problems pane."
				},
				"csharp.referencesCodeLens.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Specifies whether the references CodeLens should be shown."
				},
				"csharp.testsCodeLens.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Specifies whether the run and debug test CodeLens should be shown."
				},
				"csharp.maxProjectFileCountForDiagnosticAnalysis": {
					"type": "number",
					"default": 1000,
					"description": "Specifies the maximum number of files for which diagnostics are reported for the whole workspace. If this limit is exceeded, diagnostics will be shown for currently opened files only. Specify 0 or less to disable the limit completely."
				},
				"csharp.semanticHighlighting.enabled": {
					"type": "boolean",
					"default": false,
					"description": "Enable/disable Semantic Highlighting for C# files (Razor files currently unsupported). Defaults to false. Close open files for changes to take effect.",
					"scope": "window"
				},
				"csharp.showOmnisharpLogOnError": {
					"type": "boolean",
					"default": true,
					"description": "Shows the OmniSharp log in the Output pane when OmniSharp reports an error."
				},
				"omnisharp.path": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"scope": "machine",
					"description": "Specifies the path to OmniSharp. When left empty the OmniSharp version pinned to the C# Extension is used. This can be the absolute path to an OmniSharp executable, a specific version number, or \"latest\". If a version number or \"latest\" is specified, the appropriate version of OmniSharp will be downloaded on your behalf. Setting \"latest\" is an opt-in into latest beta releases of OmniSharp."
				},
				"omnisharp.useGlobalMono": {
					"type": "string",
					"default": "auto",
					"scope": "machine",
					"enum": [
						"auto",
						"always",
						"never"
					],
					"enumDescriptions": [
						"Automatically launch OmniSharp with internal \"mono\", since \"mono\" 6.12.0 does not support .NET Core 3.1.40x or .NET 5 SDKs.",
						"Always launch OmniSharp with \"mono\". If version 6.4.0 or greater is not available on the PATH, an error will be printed.",
						"Never launch OmniSharp on a globally-installed Mono."
					],
					"description": "Launch OmniSharp with the globally-installed Mono. If set to \"always\", \"mono\" version 6.4.0 or greater must be available on the PATH. If set to \"auto\", OmniSharp will be launched with \"mono\" if version 6.4.0 or greater is available on the PATH."
				},
				"omnisharp.monoPath": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"scope": "machine",
					"description": "Specifies the path to a mono installation to use when \"useGlobalMono\" is set to \"always\", instead of the default system one. Example: \"/Library/Frameworks/Mono.framework/Versions/Current\""
				},
				"omnisharp.waitForDebugger": {
					"type": "boolean",
					"default": false,
					"description": "Pass the --debug flag when launching the OmniSharp server to allow a debugger to be attached."
				},
				"omnisharp.loggingLevel": {
					"type": "string",
					"default": "information",
					"enum": [
						"trace",
						"debug",
						"information",
						"warning",
						"error",
						"critical"
					],
					"description": "Specifies the level of logging output from the OmniSharp server."
				},
				"omnisharp.autoStart": {
					"type": "boolean",
					"default": true,
					"description": "Specifies whether the OmniSharp server will be automatically started or not. If false, OmniSharp can be started with the 'Restart OmniSharp' command"
				},
				"omnisharp.projectLoadTimeout": {
					"type": "number",
					"default": 60,
					"description": "The time Visual Studio Code will wait for the OmniSharp server to start. Time is expressed in seconds."
				},
				"omnisharp.maxProjectResults": {
					"type": "number",
					"default": 250,
					"description": "The maximum number of projects to be shown in the 'Select Project' dropdown (maximum 250)."
				},
				"omnisharp.defaultLaunchSolution": {
					"type": "string",
					"default": null,
					"description": "The name of the default solution used at start up if the repo has multiple solutions. e.g.'MyAwesomeSolution.sln'. Default value is `null` which will cause the first in alphabetical order to be chosen."
				},
				"omnisharp.useEditorFormattingSettings": {
					"type": "boolean",
					"default": true,
					"description": "Specifes whether OmniSharp should use VS Code editor settings for C# code formatting (use of tabs, indentation size)."
				},
				"omnisharp.minFindSymbolsFilterLength": {
					"type": "number",
					"default": 0,
					"description": "The minimum number of characters to enter before 'Go to Symbol in Workspace' operation shows any results."
				},
				"omnisharp.maxFindSymbolsItems": {
					"type": "number",
					"default": 1000,
					"description": "The maximum number of items that 'Go to Symbol in Workspace' operation can show. The limit is applied only when a positive number is specified here."
				},
				"omnisharp.disableMSBuildDiagnosticWarning": {
					"type": "boolean",
					"default": false,
					"description": "Specifies whether notifications should be shown if OmniSharp encounters warnings or errors loading a project. Note that these warnings/errors are always emitted to the OmniSharp log"
				},
				"omnisharp.enableMsBuildLoadProjectsOnDemand": {
					"type": "boolean",
					"default": false,
					"description": "If true, MSBuild project system will only load projects for files that were opened in the editor. This setting is useful for big C# codebases and allows for faster initialization of code navigation features only for projects that are relevant to code that is being edited. With this setting enabled OmniSharp may load fewer projects and may thus display incomplete reference lists for symbols."
				},
				"omnisharp.enableRoslynAnalyzers": {
					"type": "boolean",
					"default": false,
					"description": "Enables support for roslyn analyzers, code fixes and rulesets."
				},
				"omnisharp.enableEditorConfigSupport": {
					"type": "boolean",
					"default": true,
					"description": "Enables support for reading code style, naming convention and analyzer settings from .editorconfig."
				},
				"omnisharp.enableDecompilationSupport": {
					"type": "boolean",
					"default": false,
					"scope": "machine",
					"description": "Enables support for decompiling external references instead of viewing metadata."
				},
				"omnisharp.enableImportCompletion": {
					"type": "boolean",
					"default": false,
					"description": "Enables support for showing unimported types and unimported extension methods in completion lists. When committed, the appropriate using directive will be added at the top of the current file. This option can have a negative impact on initial completion responsiveness, particularly for the first few completion sessions after opening a solution."
				},
				"omnisharp.organizeImportsOnFormat": {
					"type": "boolean",
					"default": false,
					"description": "Specifies whether 'using' directives should be grouped and sorted during document formatting."
				},
				"razor.plugin.path": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"scope": "machine",
					"description": "Overrides the path to the Razor plugin dll."
				},
				"razor.devmode": {
					"type": "boolean",
					"default": false,
					"description": "Forces the omnisharp-vscode extension to run in a mode that enables local Razor.VSCode deving."
				},
				"razor.disabled": {
					"type": "boolean",
					"default": false,
					"description": "Specifies whether to disable Razor language features."
				},
				"razor.languageServer.directory": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"scope": "machine",
					"description": "Overrides the path to the Razor Language Server directory."
				},
				"razor.languageServer.debug": {
					"type": "boolean",
					"default": false,
					"description": "Specifies whether to wait for debug attach when launching the language server."
				},
				"razor.trace": {
					"type": "string",
					"default": "Off",
					"enum": [
						"Off",
						"Messages",
						"Verbose"
					],
					"enumDescriptions": [
						"Does not log messages from the Razor extension",
						"Logs only some messages from the Razor extension",
						"Logs all messages from the Razor extension"
					],
					"description": "Specifies whether to output all messages [Verbose], some messages [Messages] or not at all [Off]."
				},
				"razor.format.enable": {
					"type": "boolean",
					"scope": "window",
					"default": true,
					"description": "Enable/disable default Razor formatter."
				},
				"razor.disableBlazorDebugPrompt": {
					"type": "boolean",
					"default": false,
					"description": "Disable Blazor WebAssembly's debug requirements notification."
				}
			}
		},
		"jsonValidation": [
			{
				"fileMatch": [
					"appsettings.json",
					"appsettings.*.json"
				],
				"url": "https://json.schemastore.org/appsettings"
			},
			{
				"fileMatch": "project.json",
				"url": "http://json.schemastore.org/project"
			},
			{
				"fileMatch": "omnisharp.json",
				"url": "http://json.schemastore.org/omnisharp"
			},
			{
				"fileMatch": "global.json",
				"url": "http://json.schemastore.org/global"
			}
		],
		"commands": [
			{
				"command": "o.restart",
				"title": "Restart OmniSharp",
				"category": "OmniSharp"
			},
			{
				"command": "o.pickProjectAndStart",
				"title": "Select Project",
				"category": "OmniSharp"
			},
			{
				"command": "o.fixAll.solution",
				"title": "Fix all occurrences of a code issue within solution",
				"category": "OmniSharp"
			},
			{
				"command": "o.fixAll.project",
				"title": "Fix all occurrences of a code issue within project",
				"category": "OmniSharp"
			},
			{
				"command": "o.fixAll.document",
				"title": "Fix all occurrences of a code issue within document",
				"category": "OmniSharp"
			},
			{
				"command": "o.reanalyze.allProjects",
				"title": "Analyze all projects",
				"category": "OmniSharp"
			},
			{
				"command": "o.reanalyze.currentProject",
				"title": "Analyze current project",
				"category": "OmniSharp"
			},
			{
				"command": "dotnet.generateAssets",
				"title": "Generate Assets for Build and Debug",
				"category": ".NET"
			},
			{
				"command": "dotnet.restore.project",
				"title": "Restore Project",
				"category": ".NET"
			},
			{
				"command": "dotnet.restore.all",
				"title": "Restore All Projects",
				"category": ".NET"
			},
			{
				"command": "csharp.downloadDebugger",
				"title": "Download .NET Core Debugger",
				"category": "Debug"
			},
			{
				"command": "csharp.listProcess",
				"title": "List process for attach",
				"category": "CSharp"
			},
			{
				"command": "csharp.listRemoteProcess",
				"title": "List processes on remote connection for attach",
				"category": "CSharp"
			},
			{
				"command": "csharp.reportIssue",
				"title": "Report an issue",
				"category": "CSharp"
			},
			{
				"command": "csharp.showDecompilationTerms",
				"title": "Show the decompiler terms agreement",
				"category": "CSharp"
			},
			{
				"command": "extension.showRazorCSharpWindow",
				"title": "Show Razor CSharp",
				"category": "Razor"
			},
			{
				"command": "extension.showRazorHtmlWindow",
				"title": "Show Razor Html",
				"category": "Razor"
			},
			{
				"command": "razor.reportIssue",
				"title": "Report a Razor issue",
				"category": "Razor"
			},
			{
				"command": "dotnet.test.runTestsInContext",
				"title": "Run Tests in Context",
				"category": ".NET"
			},
			{
				"command": "dotnet.test.debugTestsInContext",
				"title": "Debug Tests in Context",
				"category": ".NET"
			}
		],
		"keybindings": [
			{
				"command": "o.showOutput",
				"key": "Ctrl+Shift+F9",
				"mac": "Cmd+Shift+F9"
			}
		],
		"snippets": [
			{
				"language": "csharp",
				"path": "./snippets/csharp.json"
			}
		],
		"breakpoints": [
			{
				"language": "csharp"
			},
			{
				"language": "razor"
			},
			{
				"language": "qsharp"
			},
			{
				"language": "aspnetcorerazor"
			}
		],
		"debuggers": [
			{
				"type": "coreclr",
				"label": ".NET Core",
				"variables": {
					"pickProcess": "csharp.listProcess",
					"pickRemoteProcess": "csharp.listRemoteProcess"
				},
				"aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217",
				"configurationAttributes": {
					"launch": {
						"type": "object",
						"required": [
							"program"
						],
						"properties": {
							"program": {
								"type": "string",
								"description": "Path to the application dll or .NET Core host executable to launch.\nThis property normally takes the form: '${workspaceFolder}/bin/Debug/(target-framework)/(project-name.dll)'\nExample: '${workspaceFolder}/bin/Debug/netcoreapp1.1/MyProject.dll'\n\nWhere:\n(target-framework) is the framework that the debugged project is being built for. This is normally found in the project file as the 'TargetFramework' property.\n(project-name.dll) is the name of debugged project's build output dll. This is normally the same as the project file name but with a '.dll' extension.",
								"default": "${workspaceFolder}/bin/Debug/<insert-target-framework-here>/<insert-project-name-here>.dll"
							},
							"cwd": {
								"type": "string",
								"description": "Path to the working directory of the program being debugged. Default is the current workspace.",
								"default": "${workspaceFolder}"
							},
							"args": {
								"anyOf": [
									{
										"type": "array",
										"description": "Command line arguments passed to the program.",
										"items": {
											"type": "string"
										},
										"default": []
									},
									{
										"type": "string",
										"description": "Stringified version of command line arguments passed to the program.",
										"default": ""
									}
								]
							},
							"stopAtEntry": {
								"type": "boolean",
								"description": "If true, the debugger should stop at the entry point of the target.",
								"default": false
							},
							"launchBrowser": {
								"description": "Describes options to launch a web browser as part of launch",
								"default": {
									"enabled": true
								},
								"type": "object",
								"required": [
									"enabled"
								],
								"properties": {
									"enabled": {
										"type": "boolean",
										"description": "Whether web browser launch is enabled",
										"default": true
									},
									"args": {
										"type": "string",
										"description": "The arguments to pass to the command to open the browser. This is used only if the platform-specific element (`osx`, `linux` or `windows`) doesn't specify a value for `args`. Use ${auto-detect-url} to automatically use the address the server is listening to.",
										"default": "${auto-detect-url}"
									},
									"osx": {
										"description": "OSX-specific web launch configuration options. By default, this will start the browser using `open`.",
										"default": {
											"command": "open",
											"args": "${auto-detect-url}"
										},
										"type": "object",
										"required": [
											"command"
										],
										"properties": {
											"command": {
												"type": "string",
												"description": "The executable which will start the web browser",
												"default": "open"
											},
											"args": {
												"type": "string",
												"description": "The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to.",
												"default": "${auto-detect-url}"
											}
										}
									},
									"linux": {
										"description": "Linux-specific web launch configuration options. By default, this will start the browser using `xdg-open`.",
										"default": {
											"command": "xdg-open",
											"args": "${auto-detect-url}"
										},
										"type": "object",
										"required": [
											"command"
										],
										"properties": {
											"command": {
												"type": "string",
												"description": "The executable which will start the web browser",
												"default": "xdg-open"
											},
											"args": {
												"type": "string",
												"description": "The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to.",
												"default": "${auto-detect-url}"
											}
										}
									},
									"windows": {
										"description": "Windows-specific web launch configuration options. By default, this will start the browser using `cmd /c start`.",
										"default": {
											"command": "cmd.exe",
											"args": "/C start ${auto-detect-url}"
										},
										"type": "object",
										"required": [
											"command"
										],
										"properties": {
											"command": {
												"type": "string",
												"description": "The executable which will start the web browser",
												"default": "cmd.exe"
											},
											"args": {
												"type": "string",
												"description": "The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to.",
												"default": "/C start ${auto-detect-url}"
											}
										}
									}
								}
							},
							"env": {
								"type": "object",
								"additionalProperties": {
									"type": "string"
								},
								"description": "Environment variables passed to the program.",
								"default": {}
							},
							"envFile": {
								"type": "string",
								"description": "Environment variables passed to the program by a file.",
								"default": "${workspaceFolder}/.env"
							},
							"console": {
								"type": "string",
								"enum": [
									"internalConsole",
									"integratedTerminal",
									"externalTerminal"
								],
								"enumDescriptions": [
									"Output to the VS Code Debug Console. This doesn't support reading console input (ex:Console.ReadLine)",
									"VS Code's integrated terminal",
									"External terminal that can be configured via user settings"
								],
								"description": "Where to launch the debug target.",
								"default": "internalConsole"
							},
							"externalConsole": {
								"type": "boolean",
								"description": "Attribute 'externalConsole' is deprecated, use 'console' instead.",
								"default": false
							},
							"sourceFileMap": {
								"type": "object",
								"description": "Optional source file mappings passed to the debug engine. Example: '{ \"C:\\foo\":\"/home/user/foo\" }'",
								"additionalProperties": {
									"type": "string"
								},
								"default": {
									"<insert-source-path-here>": "<insert-target-path-here>"
								}
							},
							"justMyCode": {
								"type": "boolean",
								"description": "Optional flag to only show user code.",
								"default": true
							},
							"requireExactSource": {
								"type": "boolean",
								"description": "Optional flag to require current source code to match the pdb.",
								"default": true
							},
							"enableStepFiltering": {
								"type": "boolean",
								"description": "Optional flag to enable stepping over Properties and Operators.",
								"default": true
							},
							"logging": {
								"description": "Optional flags to determine what types of messages should be logged to the output window.",
								"type": "object",
								"required": [],
								"default": {},
								"properties": {
									"exceptions": {
										"type": "boolean",
										"description": "Optional flag to determine whether exception messages should be logged to the output window.",
										"default": true
									},
									"moduleLoad": {
										"type": "boolean",
										"description": "Optional flag to determine whether module load events should be logged to the output window.",
										"default": true
									},
									"programOutput": {
										"type": "boolean",
										"description": "Optional flag to determine whether program output should be logged to the output window when not using an external console.",
										"default": true
									},
									"engineLogging": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic engine logs should be logged to the output window.",
										"default": false
									},
									"browserStdOut": {
										"type": "boolean",
										"description": "Optional flag to determine if stdout text from the launching the web browser should be logged to the output window.",
										"default": true
									},
									"elapsedTiming": {
										"type": "boolean",
										"description": "If true, engine logging will include `adapterElapsedTime` and `engineElapsedTime` properties to indicate the amount of time, in microseconds, that a request took.",
										"default": false
									},
									"threadExit": {
										"type": "boolean",
										"description": "Controls if a message is logged when a thread in the target process exits. Default: `false`.",
										"default": false
									},
									"processExit": {
										"type": "boolean",
										"description": "Controls if a message is logged when the target process exits, or debugging is stopped. Default: `true`.",
										"default": true
									}
								}
							},
							"pipeTransport": {
								"description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the .NET Core debugger backend executable (vsdbg).",
								"type": "object",
								"required": [
									"debuggerPath"
								],
								"default": {
									"pipeCwd": "${workspaceFolder}",
									"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
									"pipeArgs": [],
									"debuggerPath": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
								},
								"properties": {
									"pipeCwd": {
										"type": "string",
										"description": "The fully qualified path to the working directory for the pipe program.",
										"default": "${workspaceFolder}"
									},
									"pipeProgram": {
										"type": "string",
										"description": "The fully qualified pipe command to execute.",
										"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
									},
									"pipeArgs": {
										"anyOf": [
											{
												"type": "array",
												"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
												"items": {
													"type": "string"
												},
												"default": []
											},
											{
												"type": "string",
												"description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
												"default": ""
											}
										],
										"default": []
									},
									"debuggerPath": {
										"type": "string",
										"description": "The full path to the debugger on the target machine.",
										"default": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
									},
									"pipeEnv": {
										"type": "object",
										"additionalProperties": {
											"type": "string"
										},
										"description": "Environment variables passed to the pipe program.",
										"default": {}
									},
									"quoteArgs": {
										"type": "boolean",
										"description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
										"default": true
									},
									"windows": {
										"description": "Windows-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceFolder}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example 'c:\\tools\\plink.exe'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceFolder}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"anyOf": [
													{
														"type": "array",
														"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"items": {
															"type": "string"
														},
														"default": []
													},
													{
														"type": "string",
														"description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"default": ""
													}
												],
												"default": []
											},
											"quoteArgs": {
												"type": "boolean",
												"description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
												"default": true
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"osx": {
										"description": "OSX-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceFolder}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceFolder}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"anyOf": [
													{
														"type": "array",
														"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"items": {
															"type": "string"
														},
														"default": []
													},
													{
														"type": "string",
														"description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"default": ""
													}
												],
												"default": []
											},
											"quoteArgs": {
												"type": "boolean",
												"description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
												"default": true
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"linux": {
										"description": "Linux-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceFolder}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceFolder}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"anyOf": [
													{
														"type": "array",
														"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"items": {
															"type": "string"
														},
														"default": []
													},
													{
														"type": "string",
														"description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"default": ""
													}
												],
												"default": []
											},
											"quoteArgs": {
												"type": "boolean",
												"description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
												"default": true
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									}
								}
							},
							"suppressJITOptimizations": {
								"type": "boolean",
								"description": "If true, when an optimized module (.dll compiled in the Release configuration) loads in the target process, the debugger will ask the Just-In-Time compiler to generate code with optimizations disabled. For more information: https://aka.ms/VSCode-CS-LaunchJson#suppress-jit-optimizations",
								"default": false
							},
							"symbolOptions": {
								"description": "Options to control how symbols (.pdb files) are found and loaded.",
								"default": {
									"searchPaths": [],
									"searchMicrosoftSymbolServer": false,
									"searchNuGetOrgSymbolServer": false
								},
								"type": "object",
								"properties": {
									"searchPaths": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"description": "Array of symbol server URLs (example: http​://MyExampleSymbolServer) or directories (example: /build/symbols) to search for .pdb files. These directories will be searched in addition to the default locations -- next to the module and the path where the pdb was originally dropped to.",
										"default": []
									},
									"searchMicrosoftSymbolServer": {
										"type": "boolean",
										"description": "If 'true' the Microsoft Symbol server (https​://msdl.microsoft.com​/download/symbols) is added to the symbols search path. If unspecified, this option defaults to 'false'.",
										"default": false
									},
									"searchNuGetOrgSymbolServer": {
										"type": "boolean",
										"description": "If 'true' the NuGet.org symbol server (https​://symbols.nuget.org​/download/symbols) is added to the symbols search path. If unspecified, this option defaults to 'false'.",
										"default": false
									},
									"cachePath": {
										"type": "string",
										"description": "Directory where symbols downloaded from symbol servers should be cached. If unspecified, on Windows the debugger will default to %TEMP%\\SymbolCache, and on Linux and macOS the debugger will default to ~/.dotnet/symbolcache.",
										"default": "~/.dotnet/symbolcache"
									},
									"moduleFilter": {
										"description": "Provides options to control which modules (.dll files) the debugger will attempt to load symbols (.pdb files) for.",
										"default": {
											"mode": "loadAllButExcluded",
											"excludedModules": []
										},
										"type": "object",
										"required": [
											"mode"
										],
										"properties": {
											"mode": {
												"type": "string",
												"enum": [
													"loadAllButExcluded",
													"loadOnlyIncluded"
												],
												"enumDescriptions": [
													"Load symbols for all modules unless the module is in the 'excludedModules' array.",
													"Do not attempt to load symbols for ANY module unless it is in the 'includedModules' array, or it is included through the 'includeSymbolsNextToModules' setting."
												],
												"description": "Controls which of the two basic operating modes the module filter operates in.",
												"default": "loadAllButExcluded"
											},
											"excludedModules": {
												"type": "array",
												"items": {
													"type": "string"
												},
												"description": "Array of modules that the debugger should NOT load symbols for. Wildcards (example: MyCompany.*.dll) are supported.\n\nThis property is ignored unless 'mode' is set to 'loadAllButExcluded'.",
												"default": []
											},
											"includedModules": {
												"type": "array",
												"items": {
													"type": "string"
												},
												"description": "Array of modules that the debugger should load symbols for. Wildcards (example: MyCompany.*.dll) are supported.\n\nThis property is ignored unless 'mode' is set to 'loadOnlyIncluded'.",
												"default": [
													"MyExampleModule.dll"
												]
											},
											"includeSymbolsNextToModules": {
												"type": "boolean",
												"description": "If true, for any module NOT in the 'includedModules' array, the debugger will still check next to the module itself and the launching executable, but it will not check paths on the symbol search list. This option defaults to 'true'.\n\nThis property is ignored unless 'mode' is set to 'loadOnlyIncluded'.",
												"default": true
											}
										}
									}
								}
							},
							"sourceLinkOptions": {
								"description": "Options to control how Source Link connects to web servers. For more information: https://aka.ms/VSCode-CS-LaunchJson#source-link-options",
								"default": {
									"*": {
										"enabled": true
									}
								},
								"type": "object",
								"additionalItems": {
									"type": "object",
									"properties": {
										"enabled": {
											"title": "boolean",
											"description": "Is Source Link enabled for this URL?  If unspecified, this option defaults to 'true'.",
											"default": "true"
										}
									}
								}
							},
							"allowFastEvaluate": {
								"type": "boolean",
								"description": "When true (the default state), the debugger will attempt faster evaluation by simulating execution of simple properties and methods.",
								"default": true
							},
							"targetOutputLogPath": {
								"type": "string",
								"description": "When set, text that the target application writes to stdout and stderr (ex: Console.WriteLine) will be saved to the specified file. This option is ignored if console is set to something other than internalConsole.",
								"default": "${workspaceFolder}/out.txt"
							}
						}
					},
					"attach": {
						"type": "object",
						"required": [],
						"properties": {
							"processName": {
								"type": "string",
								"description": "",
								"default": "The process name to attach to. If this is used, 'processId' should not be used."
							},
							"processId": {
								"anyOf": [
									{
										"type": "string",
										"description": "The process id to attach to. Use \"${command:pickProcess}\" to get a list of running processes to attach to. If 'processId' used, 'processName' should not be used.",
										"default": "${command:pickProcess}"
									},
									{
										"type": "integer",
										"description": "The process id to attach to. Use \"${command:pickProcess}\" to get a list of running processes to attach to. If 'processId' used, 'processName' should not be used.",
										"default": 0
									}
								]
							},
							"sourceFileMap": {
								"type": "object",
								"description": "Optional source file mappings passed to the debug engine. Example: '{ \"C:\\foo\":\"/home/user/foo\" }'",
								"additionalProperties": {
									"type": "string"
								},
								"default": {
									"<insert-source-path-here>": "<insert-target-path-here>"
								}
							},
							"justMyCode": {
								"type": "boolean",
								"description": "Optional flag to only show user code.",
								"default": true
							},
							"requireExactSource": {
								"type": "boolean",
								"description": "Optional flag to require current source code to match the pdb.",
								"default": true
							},
							"enableStepFiltering": {
								"type": "boolean",
								"description": "Optional flag to enable stepping over Properties and Operators.",
								"default": true
							},
							"logging": {
								"description": "Optional flags to determine what types of messages should be logged to the output window.",
								"type": "object",
								"required": [],
								"default": {},
								"properties": {
									"exceptions": {
										"type": "boolean",
										"description": "Optional flag to determine whether exception messages should be logged to the output window.",
										"default": true
									},
									"moduleLoad": {
										"type": "boolean",
										"description": "Optional flag to determine whether module load events should be logged to the output window.",
										"default": true
									},
									"programOutput": {
										"type": "boolean",
										"description": "Optional flag to determine whether program output should be logged to the output window when not using an external console.",
										"default": true
									},
									"engineLogging": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic engine logs should be logged to the output window.",
										"default": false
									},
									"browserStdOut": {
										"type": "boolean",
										"description": "Optional flag to determine if stdout text from the launching the web browser should be logged to the output window.",
										"default": true
									},
									"elapsedTiming": {
										"type": "boolean",
										"description": "If true, engine logging will include `adapterElapsedTime` and `engineElapsedTime` properties to indicate the amount of time, in microseconds, that a request took.",
										"default": false
									},
									"threadExit": {
										"type": "boolean",
										"description": "Controls if a message is logged when a thread in the target process exits. Default: `false`.",
										"default": false
									},
									"processExit": {
										"type": "boolean",
										"description": "Controls if a message is logged when the target process exits, or debugging is stopped. Default: `true`.",
										"default": true
									}
								}
							},
							"pipeTransport": {
								"description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the .NET Core debugger backend executable (vsdbg).",
								"type": "object",
								"required": [
									"debuggerPath"
								],
								"default": {
									"pipeCwd": "${workspaceFolder}",
									"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
									"pipeArgs": [],
									"debuggerPath": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
								},
								"properties": {
									"pipeCwd": {
										"type": "string",
										"description": "The fully qualified path to the working directory for the pipe program.",
										"default": "${workspaceFolder}"
									},
									"pipeProgram": {
										"type": "string",
										"description": "The fully qualified pipe command to execute.",
										"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
									},
									"pipeArgs": {
										"anyOf": [
											{
												"type": "array",
												"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
												"items": {
													"type": "string"
												},
												"default": []
											},
											{
												"type": "string",
												"description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
												"default": ""
											}
										],
										"default": []
									},
									"debuggerPath": {
										"type": "string",
										"description": "The full path to the debugger on the target machine.",
										"default": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
									},
									"pipeEnv": {
										"type": "object",
										"additionalProperties": {
											"type": "string"
										},
										"description": "Environment variables passed to the pipe program.",
										"default": {}
									},
									"quoteArgs": {
										"type": "boolean",
										"description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
										"default": true
									},
									"windows": {
										"description": "Windows-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceFolder}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example 'c:\\tools\\plink.exe'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceFolder}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"anyOf": [
													{
														"type": "array",
														"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"items": {
															"type": "string"
														},
														"default": []
													},
													{
														"type": "string",
														"description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"default": ""
													}
												],
												"default": []
											},
											"quoteArgs": {
												"type": "boolean",
												"description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
												"default": true
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"osx": {
										"description": "OSX-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceFolder}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceFolder}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"anyOf": [
													{
														"type": "array",
														"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"items": {
															"type": "string"
														},
														"default": []
													},
													{
														"type": "string",
														"description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"default": ""
													}
												],
												"default": []
											},
											"quoteArgs": {
												"type": "boolean",
												"description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
												"default": true
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"linux": {
										"description": "Linux-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceFolder}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceFolder}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"anyOf": [
													{
														"type": "array",
														"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"items": {
															"type": "string"
														},
														"default": []
													},
													{
														"type": "string",
														"description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"default": ""
													}
												],
												"default": []
											},
											"quoteArgs": {
												"type": "boolean",
												"description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
												"default": true
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									}
								}
							},
							"suppressJITOptimizations": {
								"type": "boolean",
								"description": "If true, when an optimized module (.dll compiled in the Release configuration) loads in the target process, the debugger will ask the Just-In-Time compiler to generate code with optimizations disabled. For more information: https://aka.ms/VSCode-CS-LaunchJson#suppress-jit-optimizations",
								"default": false
							},
							"symbolOptions": {
								"description": "Options to control how symbols (.pdb files) are found and loaded.",
								"default": {
									"searchPaths": [],
									"searchMicrosoftSymbolServer": false,
									"searchNuGetOrgSymbolServer": false
								},
								"type": "object",
								"properties": {
									"searchPaths": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"description": "Array of symbol server URLs (example: http​://MyExampleSymbolServer) or directories (example: /build/symbols) to search for .pdb files. These directories will be searched in addition to the default locations -- next to the module and the path where the pdb was originally dropped to.",
										"default": []
									},
									"searchMicrosoftSymbolServer": {
										"type": "boolean",
										"description": "If 'true' the Microsoft Symbol server (https​://msdl.microsoft.com​/download/symbols) is added to the symbols search path. If unspecified, this option defaults to 'false'.",
										"default": false
									},
									"searchNuGetOrgSymbolServer": {
										"type": "boolean",
										"description": "If 'true' the NuGet.org symbol server (https​://symbols.nuget.org​/download/symbols) is added to the symbols search path. If unspecified, this option defaults to 'false'.",
										"default": false
									},
									"cachePath": {
										"type": "string",
										"description": "Directory where symbols downloaded from symbol servers should be cached. If unspecified, on Windows the debugger will default to %TEMP%\\SymbolCache, and on Linux and macOS the debugger will default to ~/.dotnet/symbolcache.",
										"default": "~/.dotnet/symbolcache"
									},
									"moduleFilter": {
										"description": "Provides options to control which modules (.dll files) the debugger will attempt to load symbols (.pdb files) for.",
										"default": {
											"mode": "loadAllButExcluded",
											"excludedModules": []
										},
										"type": "object",
										"required": [
											"mode"
										],
										"properties": {
											"mode": {
												"type": "string",
												"enum": [
													"loadAllButExcluded",
													"loadOnlyIncluded"
												],
												"enumDescriptions": [
													"Load symbols for all modules unless the module is in the 'excludedModules' array.",
													"Do not attempt to load symbols for ANY module unless it is in the 'includedModules' array, or it is included through the 'includeSymbolsNextToModules' setting."
												],
												"description": "Controls which of the two basic operating modes the module filter operates in.",
												"default": "loadAllButExcluded"
											},
											"excludedModules": {
												"type": "array",
												"items": {
													"type": "string"
												},
												"description": "Array of modules that the debugger should NOT load symbols for. Wildcards (example: MyCompany.*.dll) are supported.\n\nThis property is ignored unless 'mode' is set to 'loadAllButExcluded'.",
												"default": []
											},
											"includedModules": {
												"type": "array",
												"items": {
													"type": "string"
												},
												"description": "Array of modules that the debugger should load symbols for. Wildcards (example: MyCompany.*.dll) are supported.\n\nThis property is ignored unless 'mode' is set to 'loadOnlyIncluded'.",
												"default": [
													"MyExampleModule.dll"
												]
											},
											"includeSymbolsNextToModules": {
												"type": "boolean",
												"description": "If true, for any module NOT in the 'includedModules' array, the debugger will still check next to the module itself and the launching executable, but it will not check paths on the symbol search list. This option defaults to 'true'.\n\nThis property is ignored unless 'mode' is set to 'loadOnlyIncluded'.",
												"default": true
											}
										}
									}
								}
							},
							"sourceLinkOptions": {
								"description": "Options to control how Source Link connects to web servers. For more information: https://aka.ms/VSCode-CS-LaunchJson#source-link-options",
								"default": {
									"*": {
										"enabled": true
									}
								},
								"type": "object",
								"additionalItems": {
									"type": "object",
									"properties": {
										"enabled": {
											"title": "boolean",
											"description": "Is Source Link enabled for this URL?  If unspecified, this option defaults to 'true'.",
											"default": "true"
										}
									}
								}
							},
							"allowFastEvaluate": {
								"type": "boolean",
								"description": "When true (the default state), the debugger will attempt faster evaluation by simulating execution of simple properties and methods.",
								"default": true
							}
						}
					}
				},
				"configurationSnippets": [
					{
						"label": ".NET: Launch .NET Core Console App",
						"description": "Launch a .NET Core Console App with a debugger.",
						"body": {
							"name": ".NET Core Launch (console)",
							"type": "coreclr",
							"request": "launch",
							"preLaunchTask": "build",
							"program": "^\"\\${workspaceFolder}/bin/Debug/${1:<target-framework>}/${2:<project-name.dll>}\"",
							"args": [],
							"cwd": "^\"\\${workspaceFolder}\"",
							"stopAtEntry": false,
							"console": "internalConsole"
						}
					},
					{
						"label": ".NET: Attach to local .NET Core Console App",
						"description": "Attach a debugger to a .NET Core Console App.",
						"body": {
							"name": ".NET Core Attach",
							"type": "coreclr",
							"request": "attach",
							"processId": "^\"\\${command:pickProcess}\""
						}
					},
					{
						"label": ".NET: Launch a local .NET Core Web App",
						"description": "Launch a .NET Core Web App with both a browser and a debugger.",
						"body": {
							"name": ".NET Core Launch (web)",
							"type": "coreclr",
							"request": "launch",
							"preLaunchTask": "build",
							"program": "^\"\\${workspaceFolder}/bin/Debug/${1:<target-framework>}/${2:<project-name.dll>}\"",
							"args": [],
							"cwd": "^\"\\${workspaceFolder}\"",
							"stopAtEntry": false,
							"serverReadyAction": {
								"action": "openExternally",
								"pattern": "\\\\bNow listening on:\\\\s+(https?://\\\\S+)"
							},
							"env": {
								"ASPNETCORE_ENVIRONMENT": "Development"
							},
							"sourceFileMap": {
								"/Views": "^\"\\${workspaceFolder}/Views\""
							}
						}
					},
					{
						"label": ".NET: Launch a remote .NET Core Console App",
						"description": "Launch a .NET Core Console App on a remote machine.",
						"body": {
							"name": ".NET Core Launch (console)",
							"type": "coreclr",
							"request": "launch",
							"preLaunchTask": "build",
							"program": "^\"\\${workspaceFolder}/bin/Debug/${1:<target-framework>}/${2:<project-name.dll>}\"",
							"args": [],
							"cwd": "^\"\\${workspaceFolder}\"",
							"stopAtEntry": false,
							"console": "internalConsole",
							"pipeTransport": {
								"pipeCwd": "^\"\\${workspaceFolder}\"",
								"pipeProgram": "^\"${3:enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'}\"",
								"pipeArgs": [],
								"debuggerPath": "^\"${4:enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg}\""
							}
						}
					},
					{
						"label": ".NET: Attach to remote .NET Core Console App",
						"description": "Attach a debugger to a .NET Core Console App on a remote machine.",
						"body": {
							"name": ".NET Core Attach",
							"type": "coreclr",
							"request": "attach",
							"processId": "^\"\\${command:pickRemoteProcess}\"",
							"pipeTransport": {
								"pipeCwd": "^\"\\${workspaceFolder}\"",
								"pipeProgram": "^\"${1:enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'}\"",
								"pipeArgs": [],
								"debuggerPath": "^\"${2:enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg}\""
							}
						}
					}
				]
			},
			{
				"type": "clr",
				"label": ".NET",
				"variables": {
					"pickProcess": "csharp.listProcess",
					"pickRemoteProcess": "csharp.listRemoteProcess"
				},
				"aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217",
				"configurationAttributes": {
					"launch": {
						"type": "object",
						"required": [
							"program"
						],
						"properties": {
							"program": {
								"type": "string",
								"description": "Path to the application dll or .NET Core host executable to launch.\nThis property normally takes the form: '${workspaceFolder}/bin/Debug/(target-framework)/(project-name.dll)'\nExample: '${workspaceFolder}/bin/Debug/netcoreapp1.1/MyProject.dll'\n\nWhere:\n(target-framework) is the framework that the debugged project is being built for. This is normally found in the project file as the 'TargetFramework' property.\n(project-name.dll) is the name of debugged project's build output dll. This is normally the same as the project file name but with a '.dll' extension.",
								"default": "${workspaceFolder}/bin/Debug/<insert-target-framework-here>/<insert-project-name-here>.dll"
							},
							"cwd": {
								"type": "string",
								"description": "Path to the working directory of the program being debugged. Default is the current workspace.",
								"default": "${workspaceFolder}"
							},
							"args": {
								"anyOf": [
									{
										"type": "array",
										"description": "Command line arguments passed to the program.",
										"items": {
											"type": "string"
										},
										"default": []
									},
									{
										"type": "string",
										"description": "Stringified version of command line arguments passed to the program.",
										"default": ""
									}
								]
							},
							"stopAtEntry": {
								"type": "boolean",
								"description": "If true, the debugger should stop at the entry point of the target.",
								"default": false
							},
							"launchBrowser": {
								"description": "Describes options to launch a web browser as part of launch",
								"default": {
									"enabled": true
								},
								"type": "object",
								"required": [
									"enabled"
								],
								"properties": {
									"enabled": {
										"type": "boolean",
										"description": "Whether web browser launch is enabled",
										"default": true
									},
									"args": {
										"type": "string",
										"description": "The arguments to pass to the command to open the browser. This is used only if the platform-specific element (`osx`, `linux` or `windows`) doesn't specify a value for `args`. Use ${auto-detect-url} to automatically use the address the server is listening to.",
										"default": "${auto-detect-url}"
									},
									"osx": {
										"description": "OSX-specific web launch configuration options. By default, this will start the browser using `open`.",
										"default": {
											"command": "open",
											"args": "${auto-detect-url}"
										},
										"type": "object",
										"required": [
											"command"
										],
										"properties": {
											"command": {
												"type": "string",
												"description": "The executable which will start the web browser",
												"default": "open"
											},
											"args": {
												"type": "string",
												"description": "The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to.",
												"default": "${auto-detect-url}"
											}
										}
									},
									"linux": {
										"description": "Linux-specific web launch configuration options. By default, this will start the browser using `xdg-open`.",
										"default": {
											"command": "xdg-open",
											"args": "${auto-detect-url}"
										},
										"type": "object",
										"required": [
											"command"
										],
										"properties": {
											"command": {
												"type": "string",
												"description": "The executable which will start the web browser",
												"default": "xdg-open"
											},
											"args": {
												"type": "string",
												"description": "The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to.",
												"default": "${auto-detect-url}"
											}
										}
									},
									"windows": {
										"description": "Windows-specific web launch configuration options. By default, this will start the browser using `cmd /c start`.",
										"default": {
											"command": "cmd.exe",
											"args": "/C start ${auto-detect-url}"
										},
										"type": "object",
										"required": [
											"command"
										],
										"properties": {
											"command": {
												"type": "string",
												"description": "The executable which will start the web browser",
												"default": "cmd.exe"
											},
											"args": {
												"type": "string",
												"description": "The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to.",
												"default": "/C start ${auto-detect-url}"
											}
										}
									}
								}
							},
							"env": {
								"type": "object",
								"additionalProperties": {
									"type": "string"
								},
								"description": "Environment variables passed to the program.",
								"default": {}
							},
							"envFile": {
								"type": "string",
								"description": "Environment variables passed to the program by a file.",
								"default": "${workspaceFolder}/.env"
							},
							"console": {
								"type": "string",
								"enum": [
									"internalConsole",
									"integratedTerminal",
									"externalTerminal"
								],
								"enumDescriptions": [
									"Output to the VS Code Debug Console. This doesn't support reading console input (ex:Console.ReadLine)",
									"VS Code's integrated terminal",
									"External terminal that can be configured via user settings"
								],
								"description": "Where to launch the debug target.",
								"default": "internalConsole"
							},
							"externalConsole": {
								"type": "boolean",
								"description": "Attribute 'externalConsole' is deprecated, use 'console' instead.",
								"default": false
							},
							"sourceFileMap": {
								"type": "object",
								"description": "Optional source file mappings passed to the debug engine. Example: '{ \"C:\\foo\":\"/home/user/foo\" }'",
								"additionalProperties": {
									"type": "string"
								},
								"default": {
									"<insert-source-path-here>": "<insert-target-path-here>"
								}
							},
							"justMyCode": {
								"type": "boolean",
								"description": "Optional flag to only show user code.",
								"default": true
							},
							"requireExactSource": {
								"type": "boolean",
								"description": "Optional flag to require current source code to match the pdb.",
								"default": true
							},
							"enableStepFiltering": {
								"type": "boolean",
								"description": "Optional flag to enable stepping over Properties and Operators.",
								"default": true
							},
							"logging": {
								"description": "Optional flags to determine what types of messages should be logged to the output window.",
								"type": "object",
								"required": [],
								"default": {},
								"properties": {
									"exceptions": {
										"type": "boolean",
										"description": "Optional flag to determine whether exception messages should be logged to the output window.",
										"default": true
									},
									"moduleLoad": {
										"type": "boolean",
										"description": "Optional flag to determine whether module load events should be logged to the output window.",
										"default": true
									},
									"programOutput": {
										"type": "boolean",
										"description": "Optional flag to determine whether program output should be logged to the output window when not using an external console.",
										"default": true
									},
									"engineLogging": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic engine logs should be logged to the output window.",
										"default": false
									},
									"browserStdOut": {
										"type": "boolean",
										"description": "Optional flag to determine if stdout text from the launching the web browser should be logged to the output window.",
										"default": true
									},
									"elapsedTiming": {
										"type": "boolean",
										"description": "If true, engine logging will include `adapterElapsedTime` and `engineElapsedTime` properties to indicate the amount of time, in microseconds, that a request took.",
										"default": false
									},
									"threadExit": {
										"type": "boolean",
										"description": "Controls if a message is logged when a thread in the target process exits. Default: `false`.",
										"default": false
									},
									"processExit": {
										"type": "boolean",
										"description": "Controls if a message is logged when the target process exits, or debugging is stopped. Default: `true`.",
										"default": true
									}
								}
							},
							"pipeTransport": {
								"description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the .NET Core debugger backend executable (vsdbg).",
								"type": "object",
								"required": [
									"debuggerPath"
								],
								"default": {
									"pipeCwd": "${workspaceFolder}",
									"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
									"pipeArgs": [],
									"debuggerPath": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
								},
								"properties": {
									"pipeCwd": {
										"type": "string",
										"description": "The fully qualified path to the working directory for the pipe program.",
										"default": "${workspaceFolder}"
									},
									"pipeProgram": {
										"type": "string",
										"description": "The fully qualified pipe command to execute.",
										"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
									},
									"pipeArgs": {
										"anyOf": [
											{
												"type": "array",
												"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
												"items": {
													"type": "string"
												},
												"default": []
											},
											{
												"type": "string",
												"description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
												"default": ""
											}
										],
										"default": []
									},
									"debuggerPath": {
										"type": "string",
										"description": "The full path to the debugger on the target machine.",
										"default": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
									},
									"pipeEnv": {
										"type": "object",
										"additionalProperties": {
											"type": "string"
										},
										"description": "Environment variables passed to the pipe program.",
										"default": {}
									},
									"quoteArgs": {
										"type": "boolean",
										"description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
										"default": true
									},
									"windows": {
										"description": "Windows-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceFolder}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example 'c:\\tools\\plink.exe'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceFolder}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"anyOf": [
													{
														"type": "array",
														"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"items": {
															"type": "string"
														},
														"default": []
													},
													{
														"type": "string",
														"description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"default": ""
													}
												],
												"default": []
											},
											"quoteArgs": {
												"type": "boolean",
												"description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
												"default": true
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"osx": {
										"description": "OSX-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceFolder}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceFolder}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"anyOf": [
													{
														"type": "array",
														"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"items": {
															"type": "string"
														},
														"default": []
													},
													{
														"type": "string",
														"description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"default": ""
													}
												],
												"default": []
											},
											"quoteArgs": {
												"type": "boolean",
												"description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
												"default": true
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"linux": {
										"description": "Linux-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceFolder}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceFolder}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"anyOf": [
													{
														"type": "array",
														"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"items": {
															"type": "string"
														},
														"default": []
													},
													{
														"type": "string",
														"description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"default": ""
													}
												],
												"default": []
											},
											"quoteArgs": {
												"type": "boolean",
												"description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
												"default": true
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									}
								}
							},
							"suppressJITOptimizations": {
								"type": "boolean",
								"description": "If true, when an optimized module (.dll compiled in the Release configuration) loads in the target process, the debugger will ask the Just-In-Time compiler to generate code with optimizations disabled. For more information: https://aka.ms/VSCode-CS-LaunchJson#suppress-jit-optimizations",
								"default": false
							},
							"symbolOptions": {
								"description": "Options to control how symbols (.pdb files) are found and loaded.",
								"default": {
									"searchPaths": [],
									"searchMicrosoftSymbolServer": false,
									"searchNuGetOrgSymbolServer": false
								},
								"type": "object",
								"properties": {
									"searchPaths": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"description": "Array of symbol server URLs (example: http​://MyExampleSymbolServer) or directories (example: /build/symbols) to search for .pdb files. These directories will be searched in addition to the default locations -- next to the module and the path where the pdb was originally dropped to.",
										"default": []
									},
									"searchMicrosoftSymbolServer": {
										"type": "boolean",
										"description": "If 'true' the Microsoft Symbol server (https​://msdl.microsoft.com​/download/symbols) is added to the symbols search path. If unspecified, this option defaults to 'false'.",
										"default": false
									},
									"searchNuGetOrgSymbolServer": {
										"type": "boolean",
										"description": "If 'true' the NuGet.org symbol server (https​://symbols.nuget.org​/download/symbols) is added to the symbols search path. If unspecified, this option defaults to 'false'.",
										"default": false
									},
									"cachePath": {
										"type": "string",
										"description": "Directory where symbols downloaded from symbol servers should be cached. If unspecified, on Windows the debugger will default to %TEMP%\\SymbolCache, and on Linux and macOS the debugger will default to ~/.dotnet/symbolcache.",
										"default": "~/.dotnet/symbolcache"
									},
									"moduleFilter": {
										"description": "Provides options to control which modules (.dll files) the debugger will attempt to load symbols (.pdb files) for.",
										"default": {
											"mode": "loadAllButExcluded",
											"excludedModules": []
										},
										"type": "object",
										"required": [
											"mode"
										],
										"properties": {
											"mode": {
												"type": "string",
												"enum": [
													"loadAllButExcluded",
													"loadOnlyIncluded"
												],
												"enumDescriptions": [
													"Load symbols for all modules unless the module is in the 'excludedModules' array.",
													"Do not attempt to load symbols for ANY module unless it is in the 'includedModules' array, or it is included through the 'includeSymbolsNextToModules' setting."
												],
												"description": "Controls which of the two basic operating modes the module filter operates in.",
												"default": "loadAllButExcluded"
											},
											"excludedModules": {
												"type": "array",
												"items": {
													"type": "string"
												},
												"description": "Array of modules that the debugger should NOT load symbols for. Wildcards (example: MyCompany.*.dll) are supported.\n\nThis property is ignored unless 'mode' is set to 'loadAllButExcluded'.",
												"default": []
											},
											"includedModules": {
												"type": "array",
												"items": {
													"type": "string"
												},
												"description": "Array of modules that the debugger should load symbols for. Wildcards (example: MyCompany.*.dll) are supported.\n\nThis property is ignored unless 'mode' is set to 'loadOnlyIncluded'.",
												"default": [
													"MyExampleModule.dll"
												]
											},
											"includeSymbolsNextToModules": {
												"type": "boolean",
												"description": "If true, for any module NOT in the 'includedModules' array, the debugger will still check next to the module itself and the launching executable, but it will not check paths on the symbol search list. This option defaults to 'true'.\n\nThis property is ignored unless 'mode' is set to 'loadOnlyIncluded'.",
												"default": true
											}
										}
									}
								}
							},
							"sourceLinkOptions": {
								"description": "Options to control how Source Link connects to web servers. For more information: https://aka.ms/VSCode-CS-LaunchJson#source-link-options",
								"default": {
									"*": {
										"enabled": true
									}
								},
								"type": "object",
								"additionalItems": {
									"type": "object",
									"properties": {
										"enabled": {
											"title": "boolean",
											"description": "Is Source Link enabled for this URL?  If unspecified, this option defaults to 'true'.",
											"default": "true"
										}
									}
								}
							},
							"allowFastEvaluate": {
								"type": "boolean",
								"description": "When true (the default state), the debugger will attempt faster evaluation by simulating execution of simple properties and methods.",
								"default": true
							},
							"targetOutputLogPath": {
								"type": "string",
								"description": "When set, text that the target application writes to stdout and stderr (ex: Console.WriteLine) will be saved to the specified file. This option is ignored if console is set to something other than internalConsole.",
								"default": "${workspaceFolder}/out.txt"
							}
						}
					},
					"attach": {
						"type": "object",
						"required": [],
						"properties": {
							"processName": {
								"type": "string",
								"description": "",
								"default": "The process name to attach to. If this is used, 'processId' should not be used."
							},
							"processId": {
								"anyOf": [
									{
										"type": "string",
										"description": "The process id to attach to. Use \"${command:pickProcess}\" to get a list of running processes to attach to. If 'processId' used, 'processName' should not be used.",
										"default": "${command:pickProcess}"
									},
									{
										"type": "integer",
										"description": "The process id to attach to. Use \"${command:pickProcess}\" to get a list of running processes to attach to. If 'processId' used, 'processName' should not be used.",
										"default": 0
									}
								]
							},
							"sourceFileMap": {
								"type": "object",
								"description": "Optional source file mappings passed to the debug engine. Example: '{ \"C:\\foo\":\"/home/user/foo\" }'",
								"additionalProperties": {
									"type": "string"
								},
								"default": {
									"<insert-source-path-here>": "<insert-target-path-here>"
								}
							},
							"justMyCode": {
								"type": "boolean",
								"description": "Optional flag to only show user code.",
								"default": true
							},
							"requireExactSource": {
								"type": "boolean",
								"description": "Optional flag to require current source code to match the pdb.",
								"default": true
							},
							"enableStepFiltering": {
								"type": "boolean",
								"description": "Optional flag to enable stepping over Properties and Operators.",
								"default": true
							},
							"logging": {
								"description": "Optional flags to determine what types of messages should be logged to the output window.",
								"type": "object",
								"required": [],
								"default": {},
								"properties": {
									"exceptions": {
										"type": "boolean",
										"description": "Optional flag to determine whether exception messages should be logged to the output window.",
										"default": true
									},
									"moduleLoad": {
										"type": "boolean",
										"description": "Optional flag to determine whether module load events should be logged to the output window.",
										"default": true
									},
									"programOutput": {
										"type": "boolean",
										"description": "Optional flag to determine whether program output should be logged to the output window when not using an external console.",
										"default": true
									},
									"engineLogging": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic engine logs should be logged to the output window.",
										"default": false
									},
									"browserStdOut": {
										"type": "boolean",
										"description": "Optional flag to determine if stdout text from the launching the web browser should be logged to the output window.",
										"default": true
									},
									"elapsedTiming": {
										"type": "boolean",
										"description": "If true, engine logging will include `adapterElapsedTime` and `engineElapsedTime` properties to indicate the amount of time, in microseconds, that a request took.",
										"default": false
									},
									"threadExit": {
										"type": "boolean",
										"description": "Controls if a message is logged when a thread in the target process exits. Default: `false`.",
										"default": false
									},
									"processExit": {
										"type": "boolean",
										"description": "Controls if a message is logged when the target process exits, or debugging is stopped. Default: `true`.",
										"default": true
									}
								}
							},
							"pipeTransport": {
								"description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the .NET Core debugger backend executable (vsdbg).",
								"type": "object",
								"required": [
									"debuggerPath"
								],
								"default": {
									"pipeCwd": "${workspaceFolder}",
									"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
									"pipeArgs": [],
									"debuggerPath": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
								},
								"properties": {
									"pipeCwd": {
										"type": "string",
										"description": "The fully qualified path to the working directory for the pipe program.",
										"default": "${workspaceFolder}"
									},
									"pipeProgram": {
										"type": "string",
										"description": "The fully qualified pipe command to execute.",
										"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
									},
									"pipeArgs": {
										"anyOf": [
											{
												"type": "array",
												"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
												"items": {
													"type": "string"
												},
												"default": []
											},
											{
												"type": "string",
												"description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
												"default": ""
											}
										],
										"default": []
									},
									"debuggerPath": {
										"type": "string",
										"description": "The full path to the debugger on the target machine.",
										"default": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
									},
									"pipeEnv": {
										"type": "object",
										"additionalProperties": {
											"type": "string"
										},
										"description": "Environment variables passed to the pipe program.",
										"default": {}
									},
									"quoteArgs": {
										"type": "boolean",
										"description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
										"default": true
									},
									"windows": {
										"description": "Windows-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceFolder}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example 'c:\\tools\\plink.exe'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceFolder}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"anyOf": [
													{
														"type": "array",
														"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"items": {
															"type": "string"
														},
														"default": []
													},
													{
														"type": "string",
														"description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"default": ""
													}
												],
												"default": []
											},
											"quoteArgs": {
												"type": "boolean",
												"description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
												"default": true
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"osx": {
										"description": "OSX-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceFolder}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceFolder}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"anyOf": [
													{
														"type": "array",
														"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"items": {
															"type": "string"
														},
														"default": []
													},
													{
														"type": "string",
														"description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"default": ""
													}
												],
												"default": []
											},
											"quoteArgs": {
												"type": "boolean",
												"description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
												"default": true
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"linux": {
										"description": "Linux-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceFolder}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceFolder}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"anyOf": [
													{
														"type": "array",
														"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"items": {
															"type": "string"
														},
														"default": []
													},
													{
														"type": "string",
														"description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
														"default": ""
													}
												],
												"default": []
											},
											"quoteArgs": {
												"type": "boolean",
												"description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
												"default": true
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									}
								}
							},
							"suppressJITOptimizations": {
								"type": "boolean",
								"description": "If true, when an optimized module (.dll compiled in the Release configuration) loads in the target process, the debugger will ask the Just-In-Time compiler to generate code with optimizations disabled. For more information: https://aka.ms/VSCode-CS-LaunchJson#suppress-jit-optimizations",
								"default": false
							},
							"symbolOptions": {
								"description": "Options to control how symbols (.pdb files) are found and loaded.",
								"default": {
									"searchPaths": [],
									"searchMicrosoftSymbolServer": false,
									"searchNuGetOrgSymbolServer": false
								},
								"type": "object",
								"properties": {
									"searchPaths": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"description": "Array of symbol server URLs (example: http​://MyExampleSymbolServer) or directories (example: /build/symbols) to search for .pdb files. These directories will be searched in addition to the default locations -- next to the module and the path where the pdb was originally dropped to.",
										"default": []
									},
									"searchMicrosoftSymbolServer": {
										"type": "boolean",
										"description": "If 'true' the Microsoft Symbol server (https​://msdl.microsoft.com​/download/symbols) is added to the symbols search path. If unspecified, this option defaults to 'false'.",
										"default": false
									},
									"searchNuGetOrgSymbolServer": {
										"type": "boolean",
										"description": "If 'true' the NuGet.org symbol server (https​://symbols.nuget.org​/download/symbols) is added to the symbols search path. If unspecified, this option defaults to 'false'.",
										"default": false
									},
									"cachePath": {
										"type": "string",
										"description": "Directory where symbols downloaded from symbol servers should be cached. If unspecified, on Windows the debugger will default to %TEMP%\\SymbolCache, and on Linux and macOS the debugger will default to ~/.dotnet/symbolcache.",
										"default": "~/.dotnet/symbolcache"
									},
									"moduleFilter": {
										"description": "Provides options to control which modules (.dll files) the debugger will attempt to load symbols (.pdb files) for.",
										"default": {
											"mode": "loadAllButExcluded",
											"excludedModules": []
										},
										"type": "object",
										"required": [
											"mode"
										],
										"properties": {
											"mode": {
												"type": "string",
												"enum": [
													"loadAllButExcluded",
													"loadOnlyIncluded"
												],
												"enumDescriptions": [
													"Load symbols for all modules unless the module is in the 'excludedModules' array.",
													"Do not attempt to load symbols for ANY module unless it is in the 'includedModules' array, or it is included through the 'includeSymbolsNextToModules' setting."
												],
												"description": "Controls which of the two basic operating modes the module filter operates in.",
												"default": "loadAllButExcluded"
											},
											"excludedModules": {
												"type": "array",
												"items": {
													"type": "string"
												},
												"description": "Array of modules that the debugger should NOT load symbols for. Wildcards (example: MyCompany.*.dll) are supported.\n\nThis property is ignored unless 'mode' is set to 'loadAllButExcluded'.",
												"default": []
											},
											"includedModules": {
												"type": "array",
												"items": {
													"type": "string"
												},
												"description": "Array of modules that the debugger should load symbols for. Wildcards (example: MyCompany.*.dll) are supported.\n\nThis property is ignored unless 'mode' is set to 'loadOnlyIncluded'.",
												"default": [
													"MyExampleModule.dll"
												]
											},
											"includeSymbolsNextToModules": {
												"type": "boolean",
												"description": "If true, for any module NOT in the 'includedModules' array, the debugger will still check next to the module itself and the launching executable, but it will not check paths on the symbol search list. This option defaults to 'true'.\n\nThis property is ignored unless 'mode' is set to 'loadOnlyIncluded'.",
												"default": true
											}
										}
									}
								}
							},
							"sourceLinkOptions": {
								"description": "Options to control how Source Link connects to web servers. For more information: https://aka.ms/VSCode-CS-LaunchJson#source-link-options",
								"default": {
									"*": {
										"enabled": true
									}
								},
								"type": "object",
								"additionalItems": {
									"type": "object",
									"properties": {
										"enabled": {
											"title": "boolean",
											"description": "Is Source Link enabled for this URL?  If unspecified, this option defaults to 'true'.",
											"default": "true"
										}
									}
								}
							},
							"allowFastEvaluate": {
								"type": "boolean",
								"description": "When true (the default state), the debugger will attempt faster evaluation by simulating execution of simple properties and methods.",
								"default": true
							}
						}
					}
				}
			},
			{
				"type": "blazorwasm",
				"label": "Blazor WebAssembly Debug",
				"initialConfigurations": [
					{
						"type": "blazorwasm",
						"name": "Launch and Debug Blazor WebAssembly Application",
						"request": "launch"
					}
				],
				"configurationAttributes": {
					"launch": {
						"properties": {
							"cwd": {
								"type": "string",
								"description": "The directory of the Blazor WebAssembly app, defaults to the workspace folder.",
								"default": "${workspaceFolder}"
							},
							"url": {
								"type": "string",
								"description": "The URL of the application",
								"default": "https://localhost:5001"
							},
							"browser": {
								"type": "string",
								"description": "The debugging browser to launch (Edge or Chrome)",
								"default": "chrome",
								"enum": [
									"chrome",
									"edge"
								]
							},
							"trace": {
								"type": [
									"boolean",
									"string"
								],
								"default": "true",
								"enum": [
									"verbose",
									true
								],
								"description": "If true, verbose logs from JS debugger are sent to log file. If 'verbose', send logs to console."
							},
							"hosted": {
								"type": "boolean",
								"default": "false",
								"description": "True if the app is a hosted Blazor WebAssembly app, false otherwise."
							},
							"webRoot": {
								"type": "string",
								"default": "${workspaceFolder}",
								"description": "Specifies the absolute path to the webserver root."
							},
							"timeout": {
								"type": "number",
								"default": 30000,
								"description": "Retry for this number of milliseconds to connect to browser."
							},
							"program": {
								"type": "string",
								"default": "${workspaceFolder}/Server/bin/Debug/<target-framework>/<target-dll>",
								"description": "The path of the DLL to execute when launching a hosted server app"
							},
							"env": {
								"type": "object",
								"description": "Environment variables passed to dotnet. Only valid for hosted apps."
							},
							"dotNetConfig": {
								"description": "Options passed to the underlying .NET debugger. For more info, see https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md.",
								"type": "object",
								"required": [],
								"default": {},
								"properties": {
									"justMyCode": {
										"type": "boolean",
										"description": "Optional flag to only show user code.",
										"default": true
									},
									"logging": {
										"description": "Optional flags to determine what types of messages should be logged to the output window. Applicable only for the app server of hosted Blazor WASM apps.",
										"type": "object",
										"required": [],
										"default": {},
										"properties": {
											"exceptions": {
												"type": "boolean",
												"description": "Optional flag to determine whether exception messages should be logged to the output window.",
												"default": true
											},
											"moduleLoad": {
												"type": "boolean",
												"description": "Optional flag to determine whether module load events should be logged to the output window.",
												"default": true
											},
											"programOutput": {
												"type": "boolean",
												"description": "Optional flag to determine whether program output should be logged to the output window when not using an external console.",
												"default": true
											},
											"engineLogging": {
												"type": "boolean",
												"description": "Optional flag to determine whether diagnostic engine logs should be logged to the output window.",
												"default": false
											},
											"browserStdOut": {
												"type": "boolean",
												"description": "Optional flag to determine if stdout text from the launching the web browser should be logged to the output window.",
												"default": true
											},
											"elapsedTiming": {
												"type": "boolean",
												"description": "If true, engine logging will include `adapterElapsedTime` and `engineElapsedTime` properties to indicate the amount of time, in microseconds, that a request took.",
												"default": false
											},
											"threadExit": {
												"type": "boolean",
												"description": "Controls if a message is logged when a thread in the target process exits. Default: `false`.",
												"default": false
											},
											"processExit": {
												"type": "boolean",
												"description": "Controls if a message is logged when the target process exits, or debugging is stopped. Default: `true`.",
												"default": true
											}
										}
									},
									"sourceFileMap": {
										"type": "object",
										"description": "Optional source file mappings passed to the debug engine. Example: '{ \"C:\\foo\":\"/home/user/foo\" }'",
										"additionalProperties": {
											"type": "string"
										},
										"default": {
											"<insert-source-path-here>": "<insert-target-path-here>"
										}
									}
								}
							},
							"browserConfig": {
								"description": "Options based to the underlying JavaScript debugger. For more info, see https://github.com/microsoft/vscode-js-debug/blob/master/OPTIONS.md.",
								"type": "object",
								"required": [],
								"default": {},
								"properties": {
									"outputCapture": {
										"enum": [
											"console",
											"std"
										],
										"description": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
										"default": "console"
									}
								}
							}
						}
					},
					"attach": {
						"properties": {
							"url": {
								"type": "string",
								"description": "The URL of the application",
								"default": "https://localhost:5001"
							},
							"cwd": {
								"type": "string",
								"description": "The directory of the Blazor WebAssembly app, defaults to the workspace folder.",
								"default": "${workspaceFolder}"
							},
							"browser": {
								"type": "string",
								"description": "The debugging browser to launch (Edge or Chrome)",
								"default": "chrome",
								"enum": [
									"chrome",
									"edge"
								]
							},
							"trace": {
								"type": [
									"boolean",
									"string"
								],
								"default": "true",
								"enum": [
									"verbose",
									true
								],
								"description": "If true, verbose logs from JS debugger are sent to log file. If 'verbose', send logs to console."
							},
							"webRoot": {
								"type": "string",
								"default": "${workspaceFolder}",
								"description": "Specifies the absolute path to the webserver root."
							},
							"timeout": {
								"type": "number",
								"default": 30000,
								"description": "Retry for this number of milliseconds to connect to browser."
							}
						}
					}
				}
			}
		],
		"semanticTokenTypes": [
			{
				"id": "razorTagHelperElement",
				"description": "A Razor TagHelper Element"
			},
			{
				"id": "razorTagHelperAttribute",
				"description": "A Razor TagHelper Attribute"
			},
			{
				"id": "razorTransition",
				"description": "A Razor transition"
			},
			{
				"id": "razorDirectiveAttribute",
				"description": "A Razor Directive Attribute"
			},
			{
				"id": "razorDirectiveColon",
				"description": "A colon between directive attribute parameters"
			},
			{
				"id": "razorDirective",
				"description": "A Razor directive such as 'code' or 'function'"
			},
			{
				"id": "razorComment",
				"description": "A Razor comment"
			},
			{
				"id": "markupCommentPunctuation",
				"description": "The '@' or '*' of a Razor comment."
			},
			{
				"id": "markupTagDelimiter",
				"description": "Markup delimiters like '<', '>', and '/'."
			},
			{
				"id": "markupOperator",
				"description": "Delimiter for Markup Attribute Key-Value pairs."
			},
			{
				"id": "markupElement",
				"description": "The name of a Markup element."
			},
			{
				"id": "markupAttribute",
				"description": "The name of a Markup attribute."
			},
			{
				"id": "markupComment",
				"description": "The contents of a Markup comment."
			},
			{
				"id": "markupCommentPunctuation",
				"description": "The begining or ending punctuation of a Markup comment."
			},
			{
				"id": "plainKeyword",
				"description": "Represents a keyword"
			},
			{
				"id": "controlKeyword",
				"description": "Represents a control-flow keyword"
			},
			{
				"id": "operatorOverloaded",
				"description": "Represents a custom implementation of an operator"
			},
			{
				"id": "preprocessorKeyword",
				"description": "Represents"
			},
			{
				"id": "preprocessorText",
				"description": "Represents"
			},
			{
				"id": "excludedCode",
				"description": ""
			},
			{
				"id": "punctuation",
				"description": ""
			},
			{
				"id": "stringVerbatim",
				"description": ""
			},
			{
				"id": "stringEscapeCharacter",
				"description": ""
			},
			{
				"id": "delegate",
				"description": ""
			},
			{
				"id": "module",
				"description": ""
			},
			{
				"id": "extensionMethod",
				"description": ""
			},
			{
				"id": "field",
				"description": ""
			},
			{
				"id": "local",
				"description": ""
			},
			{
				"id": "xmlDocCommentAttributeName",
				"description": ""
			},
			{
				"id": "xmlDocCommentAttributeQuotes",
				"description": ""
			},
			{
				"id": "xmlDocCommentAttributeValue",
				"description": ""
			},
			{
				"id": "xmlDocCommentCDataSection",
				"description": ""
			},
			{
				"id": "xmlDocCommentComment",
				"description": ""
			},
			{
				"id": "xmlDocCommentDelimiter",
				"description": ""
			},
			{
				"id": "xmlDocCommentEntityReference",
				"description": ""
			},
			{
				"id": "xmlDocCommentName",
				"description": ""
			},
			{
				"id": "xmlDocCommentProcessingInstruction",
				"description": ""
			},
			{
				"id": "xmlDocCommentText",
				"description": ""
			}
		],
		"semanticTokenModifiers": [],
		"semanticTokenScopes": [
			{
				"language": "aspnetcorerazor",
				"scopes": {
					"razorTagHelperElement": [
						"entity.name.class.element.taghelper"
					],
					"razorTagHelperAttribute": [
						"entity.name.class.attribute.taghelper"
					],
					"razorTransition": [
						"keyword.control.razor.transition"
					],
					"razorDirectiveAttribute": [
						"keyword.control.razor.directive.attribute",
						"keyword.control.cshtml.directive.attribute"
					],
					"razorDirectiveColon": [
						"keyword.control.razor.directive.colon",
						"keyword.control.cshtml.directive.colon"
					],
					"razorDirective": [
						"keyword.control.razor.directive",
						"keyword.control.cshtml.directive"
					],
					"razorComment": [
						"comment.block.razor"
					],
					"razorCommentTransition": [
						"meta.comment.razor",
						"keyword.control.cshtml.transition"
					],
					"razorCommentStar": [
						"keyword.control.razor.comment.star",
						"meta.comment.razor"
					],
					"angleBracket": [
						"punctuation.definition.tag"
					],
					"forwardSlash": [
						"punctuation.definition.tag"
					],
					"equals": [
						"punctuation.separator.key-value.html"
					],
					"markupElement": [
						"entity.name.tag.html"
					],
					"markupAttribute": [
						"entity.other.attribute-name.html"
					],
					"markupComment": [
						"comment.block.html"
					],
					"markupCommentPunctuation": [
						"punctuation.definition.comment.html",
						"comment.block.html"
					]
				}
			},
			{
				"language": "csharp",
				"scopes": {
					"plainKeyword": [
						"keyword.cs"
					],
					"controlKeyword": [
						"keyword.control.cs"
					],
					"operatorOverloaded": [
						"entity.name.function.member.overload.cs"
					],
					"preprocessorKeyword": [
						"keyword.preprocessor.cs"
					],
					"preprocessorText": [
						"meta.preprocessor.string.cs"
					],
					"excludedCode": [
						"support.other.excluded.cs"
					],
					"punctuation": [
						"punctuation.cs"
					],
					"stringVerbatim": [
						"string.verbatim.cs"
					],
					"stringEscapeCharacter": [
						"constant.character.escape.cs"
					],
					"delegate": [
						"entity.name.type.delegate.cs"
					],
					"module": [
						"entity.name.type.module.cs"
					],
					"extensionMethod": [
						"entity.name.function.extension.cs"
					],
					"field": [
						"entity.name.variable.field.cs"
					],
					"local": [
						"entity.name.variable.local.cs"
					],
					"xmlDocCommentAttributeName": [
						"comment.documentation.attribute.name.cs"
					],
					"xmlDocCommentAttributeQuotes": [
						"comment.documentation.attribute.quotes.cs"
					],
					"xmlDocCommentAttributeValue": [
						"comment.documentation.attribute.value.cs"
					],
					"xmlDocCommentCDataSection": [
						"comment.documentation.cdata.cs"
					],
					"xmlDocCommentComment": [
						"comment.documentation.comment.cs"
					],
					"xmlDocCommentDelimiter": [
						"comment.documentation.delimiter.cs"
					],
					"xmlDocCommentEntityReference": [
						"comment.documentation.entityReference.cs"
					],
					"xmlDocCommentName": [
						"comment.documentation.name.cs"
					],
					"xmlDocCommentProcessingInstruction": [
						"comment.documentation.processingInstruction.cs"
					],
					"xmlDocCommentText": [
						"comment.documentation.cs"
					]
				}
			}
		],
		"languages": [
			{
				"id": "aspnetcorerazor",
				"extensions": [
					".cshtml",
					".razor"
				],
				"mimetypes": [
					"text/x-cshtml"
				],
				"configuration": "./src/razor/language-configuration.json"
			}
		],
		"grammars": [
			{
				"language": "aspnetcorerazor",
				"scopeName": "text.aspnetcorerazor",
				"path": "./src/razor/syntaxes/aspnetcorerazor.tmLanguage.json"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "dotnet.test.runTestsInContext",
					"when": "editorLangId == csharp"
				},
				{
					"command": "dotnet.test.debugTestsInContext",
					"when": "editorLangId == csharp"
				}
			],
			"editor/title": [
				{
					"command": "extension.showRazorCSharpWindow",
					"when": "resourceLangId == aspnetcorerazor"
				},
				{
					"command": "extension.showRazorHtmlWindow",
					"when": "resourceLangId == aspnetcorerazor"
				},
				{
					"command": "razor.reportIssue",
					"when": "resourceLangId == aspnetcorerazor"
				}
			],
			"editor/context": [
				{
					"command": "dotnet.test.runTestsInContext",
					"when": "editorLangId == csharp",
					"group": "2_dotnet@1"
				},
				{
					"command": "dotnet.test.debugTestsInContext",
					"when": "editorLangId == csharp",
					"group": "2_dotnet@2"
				}
			]
		}
	},
	"__metadata": {
		"id": "d0bfc4ab-1d3a-4487-8782-7cf6027b4fff",
		"publisherId": "d05e23de-3974-4ff0-8d47-23ee77830092",
		"publisherDisplayName": "Microsoft",
		"installedTimestamp": 1619545588704
	}
}